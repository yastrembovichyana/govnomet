import sqlite3
import asyncio
from datetime import datetime, timedelta
from typing import List, Tuple, Optional
from logger_config import get_logger

logger = get_logger('database')

class Database:
    def __init__(self, db_path: str = "govnomet.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        first_name TEXT,
                        last_name TEXT,
                        direct_hits INTEGER DEFAULT 0,
                        misses INTEGER DEFAULT 0,
                        self_hits INTEGER DEFAULT 0,
                        times_hit INTEGER DEFAULT 0,
                        last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        -- –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏
                        score INTEGER DEFAULT 0,
                        heat INTEGER DEFAULT 0,
                        last_role TEXT,
                        role_expires_at TIMESTAMP,
                        last_throw_ts TIMESTAMP
                    )
                ''')
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞)
                for col, ddl in [
                    ("score", "ALTER TABLE users ADD COLUMN score INTEGER DEFAULT 0"),
                    ("heat", "ALTER TABLE users ADD COLUMN heat INTEGER DEFAULT 0"),
                    ("last_role", "ALTER TABLE users ADD COLUMN last_role TEXT"),
                    ("role_expires_at", "ALTER TABLE users ADD COLUMN role_expires_at TIMESTAMP"),
                    ("last_throw_ts", "ALTER TABLE users ADD COLUMN last_throw_ts TIMESTAMP"),
                ]:
                    try:
                        cursor.execute(ddl)
                    except Exception:
                        pass
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS events (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        initiator_id INTEGER,
                        target_id INTEGER,
                        outcome TEXT,
                        chat_id INTEGER,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        -- –ù–æ–≤—ã–µ –ø–æ–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
                        role_used TEXT,
                        stacks_at_hit INTEGER,
                        heat_at_hit INTEGER,
                        was_reflect INTEGER DEFAULT 0,
                        targets_json TEXT,
                        FOREIGN KEY (initiator_id) REFERENCES users (user_id),
                        FOREIGN KEY (target_id) REFERENCES users (user_id)
                    )
                ''')
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ events, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                for ddl in [
                    "ALTER TABLE events ADD COLUMN role_used TEXT",
                    "ALTER TABLE events ADD COLUMN stacks_at_hit INTEGER",
                    "ALTER TABLE events ADD COLUMN heat_at_hit INTEGER",
                    "ALTER TABLE events ADD COLUMN was_reflect INTEGER DEFAULT 0",
                    "ALTER TABLE events ADD COLUMN targets_json TEXT",
                ]:
                    try:
                        cursor.execute(ddl)
                    except Exception:
                        pass
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–æ–≤
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS chat_stats (
                        chat_id INTEGER PRIMARY KEY,
                        total_throws INTEGER DEFAULT 0,
                        last_rating_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')

                # –¢–∞–±–ª–∏—Ü–∞ —Ä–æ–ª–µ–π
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS roles (
                        role_key TEXT PRIMARY KEY,
                        role_name TEXT NOT NULL,
                        emoji TEXT NOT NULL,
                        description TEXT NOT NULL,
                        bonuses TEXT NOT NULL,
                        penalties TEXT,
                        special_effects TEXT,
                        style TEXT NOT NULL
                    )
                ''')
                
                # –¢–∞–±–ª–∏—Ü–∞ —Ñ–æ–∫—É—Å–∞ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä -> —Ü–µ–ª—å)
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS focus_pairs (
                        initiator_id INTEGER,
                        target_id INTEGER,
                        chat_id INTEGER,
                        focus_stacks INTEGER DEFAULT 0,
                        last_hit_ts TIMESTAMP,
                        penalty_until TIMESTAMP,
                        PRIMARY KEY (initiator_id, target_id, chat_id)
                    )
                ''')
                
                conn.commit()
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ–ª–∏, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
                self.init_roles()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    async def add_user(self, user_id: int, username: str = None, 
                      first_name: str = None, last_name: str = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT OR REPLACE INTO users 
                    (user_id, username, first_name, last_name, last_activity)
                    VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
                ''', (user_id, username, first_name, last_name))
                conn.commit()
                logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def update_user_stats(self, user_id: int, outcome: str, is_target: bool = False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                if outcome == 'direct_hit':
                    if is_target:
                        cursor.execute('''
                            UPDATE users SET times_hit = times_hit + 1 
                            WHERE user_id = ?
                        ''', (user_id,))
                        logger.debug(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø–æ–ø–∞–¥–∞–Ω–∏–µ")
                    else:
                        cursor.execute('''
                            UPDATE users SET direct_hits = direct_hits + 1 
                            WHERE user_id = ?
                        ''', (user_id,))
                        logger.debug(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–ø–∞–¥–∞–Ω–∏–µ")
                elif outcome == 'miss':
                    if is_target:
                        # –¶–µ–ª—å –ø–æ–ª—É—á–∏–ª–∞ –ø—Ä–æ–º–∞—Ö (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)
                        logger.debug(f"ü§° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø—Ä–æ–º–∞—Ö –∫–∞–∫ —Ü–µ–ª—å")
                    else:
                        # –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è - —Å–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª
                        cursor.execute('''
                            UPDATE users SET self_hits = self_hits + 1 
                            WHERE user_id = ?
                        ''', (user_id,))
                        logger.debug(f"ü§° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª")
                elif outcome == 'splash':
                    if is_target:
                        # –¶–µ–ª—å –ø–æ–ª—É—á–∏–ª–∞ —Ä–∞–∑–ª—ë—Ç
                        cursor.execute('''
                            UPDATE users SET times_hit = times_hit + 1 
                            WHERE user_id = ?
                        ''', (user_id,))
                        logger.debug(f"üí• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª —Ä–∞–∑–ª—ë—Ç")
                    else:
                        # –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Å–æ–≤–µ—Ä—à–∏–ª —Ä–∞–∑–ª—ë—Ç
                        cursor.execute('''
                            UPDATE users SET direct_hits = direct_hits + 1 
                            WHERE user_id = ?
                        ''', (user_id,))
                        logger.debug(f"üí• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–≤–µ—Ä—à–∏–ª —Ä–∞–∑–ª—ë—Ç")
                elif outcome == 'special':
                    if is_target:
                        # –¶–µ–ª—å –ø–æ–ª—É—á–∏–ª–∞ –æ—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç
                        cursor.execute('''
                            UPDATE users SET times_hit = times_hit + 1 
                            WHERE user_id = ?
                        ''', (user_id,))
                        logger.debug(f"‚ö° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –æ—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç")
                    else:
                        # –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –ø–æ–ø–∞–ª –ø–æ–¥ –æ—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç (–±—É–º–µ—Ä–∞–Ω–≥ –∏ —Ç.–¥.)
                        cursor.execute('''
                            UPDATE users SET self_hits = self_hits + 1 
                            WHERE user_id = ?
                        ''', (user_id,))
                        logger.debug(f"‚ö° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø–∞–ª –ø–æ–¥ –æ—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç")
                
                cursor.execute('''
                    UPDATE users SET last_activity = CURRENT_TIMESTAMP 
                    WHERE user_id = ?
                ''', (user_id,))
                
                conn.commit()
                logger.debug(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {outcome}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def add_event(self, initiator_id: int, target_id: int, 
                       outcome: str, chat_id: int,
                       role_used: str = None,
                       stacks_at_hit: int = None,
                       heat_at_hit: int = None,
                       was_reflect: int = 0,
                       targets_json: str = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±—Ä–æ—Å–∫–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO events (initiator_id, target_id, outcome, chat_id, role_used, stacks_at_hit, heat_at_hit, was_reflect, targets_json)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (initiator_id, target_id, outcome, chat_id, role_used, stacks_at_hit, heat_at_hit, was_reflect, targets_json))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
                cursor.execute('''
                    INSERT OR REPLACE INTO chat_stats (chat_id, total_throws)
                    VALUES (?, COALESCE((SELECT total_throws FROM chat_stats WHERE chat_id = ?), 0) + 1)
                ''', (chat_id, chat_id))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
                if outcome == 'direct_hit':
                    cursor.execute('''
                        UPDATE users SET direct_hits = COALESCE(direct_hits, 0) + 1 
                        WHERE user_id = ?
                    ''', (initiator_id,))
                elif outcome == 'miss':
                    cursor.execute('''
                        UPDATE users SET misses = COALESCE(misses, 0) + 1, 
                                       self_hits = COALESCE(self_hits, 0) + 1
                        WHERE user_id = ?
                    ''', (initiator_id,))
                elif outcome == 'special':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–ª –ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –≤ —Å–µ–±—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—É–º–µ—Ä–∞–Ω–≥)
                    if targets_json and str(initiator_id) in targets_json:
                        cursor.execute('''
                            UPDATE users SET self_hits = COALESCE(self_hits, 0) + 1 
                            WHERE user_id = ?
                        ''', (initiator_id,))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–µ–ª–∏
                if outcome == 'direct_hit':
                    cursor.execute('''
                        UPDATE users SET times_hit = COALESCE(times_hit, 0) + 1 
                        WHERE user_id = ?
                    ''', (target_id,))
                
                conn.commit()
                logger.info(f"üí© –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {initiator_id} -> {target_id} ({outcome}) –≤ —á–∞—Ç–µ {chat_id}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
            return False

    # ---------------------- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ----------------------
    async def get_user_extended(self, user_id: int) -> Optional[tuple]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (score, heat, last_role, role_expires_at, last_throw_ts)"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT score, heat, last_role, role_expires_at, last_throw_ts
                    FROM users WHERE user_id = ?
                ''', (user_id,))
                return cursor.fetchone()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None

    async def update_user_heat(self, user_id: int, delta: int = 1):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç heat (—Å –∑–∞–∂–∏–º–æ–º 0..100)."""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE users SET heat = MAX(0, MIN(100, COALESCE(heat, 0) + ?)), last_activity = CURRENT_TIMESTAMP
                    WHERE user_id = ?
                ''', (delta, user_id))
                conn.commit()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è heat –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    async def update_user_role(self, user_id: int, role: str, expires_at: Optional[str]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å –∏ —Å—Ä–æ–∫ –µ—ë –¥–µ–π—Å—Ç–≤–∏—è."""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE users SET last_role = ?, role_expires_at = ?, last_activity = CURRENT_TIMESTAMP
                    WHERE user_id = ?
                ''', (role, expires_at, user_id))
                conn.commit()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    async def update_user_last_throw(self, user_id: int):
        """–§–∏–∫—Å–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ—Å–∫–∞."""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE users SET last_throw_ts = CURRENT_TIMESTAMP, last_activity = CURRENT_TIMESTAMP
                    WHERE user_id = ?
                ''', (user_id,))
                conn.commit()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    async def update_score(self, user_id: int, delta: int):
        """–ò–∑–º–µ–Ω—è–µ—Ç –æ–±—â–∏–π —Å—á—ë—Ç –∏–≥—Ä–æ–∫–∞."""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE users SET score = COALESCE(score, 0) + ?, last_activity = CURRENT_TIMESTAMP
                    WHERE user_id = ?
                ''', (delta, user_id))
                conn.commit()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    async def get_focus(self, initiator_id: int, target_id: int, chat_id: int) -> Tuple[int, Optional[str], Optional[str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (focus_stacks, last_hit_ts, penalty_until)."""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT focus_stacks, last_hit_ts, penalty_until
                    FROM focus_pairs WHERE initiator_id = ? AND target_id = ? AND chat_id = ?
                ''', (initiator_id, target_id, chat_id))
                row = cursor.fetchone()
                if row:
                    return row[0], row[1], row[2]
                return 0, None, None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞ –ø–∞—Ä—ã {initiator_id}->{target_id} —á–∞—Ç–∞ {chat_id}: {e}")
            return 0, None, None

    async def set_focus(self, initiator_id: int, target_id: int, chat_id: int, stacks: int, penalty_until: Optional[str] = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç focus_stacks –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã –¥–ª—è –ø–∞—Ä—ã –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä‚Üí—Ü–µ–ª—å."""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO focus_pairs (initiator_id, target_id, chat_id, focus_stacks, last_hit_ts, penalty_until)
                    VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, ?)
                    ON CONFLICT(initiator_id, target_id, chat_id)
                    DO UPDATE SET focus_stacks=excluded.focus_stacks, last_hit_ts=CURRENT_TIMESTAMP, penalty_until=excluded.penalty_until
                ''', (initiator_id, target_id, chat_id, stacks, penalty_until))
                conn.commit()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞ –ø–∞—Ä—ã {initiator_id}->{target_id}: {e}")
    
    async def get_chat_participants(self, chat_id: int) -> List[Tuple[int, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ Telegram API)"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT DISTINCT u.user_id, u.username 
                    FROM users u
                    JOIN events e ON u.user_id = e.initiator_id OR u.user_id = e.target_id
                    WHERE e.chat_id = ?
                    ORDER BY u.last_activity DESC
                ''', (chat_id,))
                participants = cursor.fetchall()
                logger.debug(f"üë• –ü–æ–ª—É—á–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}")
                return participants
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}: {e}")
            return []
    
    async def get_ratings(self, chat_id: int, days: int = 7) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                since_date = datetime.now() - timedelta(days=days)
                since_str = since_date.isoformat()
                
                # –ö–æ—Ä–æ–ª—å –≥–æ–≤–Ω–∞ (–±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π)
                cursor.execute('''
                    SELECT u.username, COUNT(*) as hits
                    FROM users u
                    JOIN events e ON u.user_id = e.initiator_id
                    WHERE e.chat_id = ? AND e.outcome = 'direct_hit'
                      AND e.timestamp >= ?
                    GROUP BY u.user_id
                    ORDER BY hits DESC
                    LIMIT 1
                ''', (chat_id, since_str))
                king = cursor.fetchone()
                
                # –ì–ª–∞–≤–Ω—ã–π –æ–±–æ—Å—Ä–∞–Ω–Ω—ã–π (—á–∞—â–µ –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–¥–∞–ª)
                cursor.execute('''
                    SELECT u.username, COUNT(*) as hit_count
                    FROM users u
                    JOIN events e ON u.user_id = e.target_id
                    WHERE e.chat_id = ? AND e.outcome = 'direct_hit'
                      AND e.timestamp >= ?
                    GROUP BY u.user_id
                    ORDER BY hit_count DESC
                    LIMIT 1
                ''', (chat_id, since_str))
                victim = cursor.fetchone()
                
                # –î–æ–ª–±–æ—ë–± –Ω–µ–¥–µ–ª–∏ (—á–∞—â–µ –≤—Å–µ—Ö —Å–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª)
                cursor.execute('''
                    SELECT u.username,
                           SUM(CASE WHEN e.outcome = 'miss' THEN 1 ELSE 0 END)
                         + SUM(CASE WHEN e.outcome = 'special' AND e.targets_json LIKE '%' || u.user_id || '%' THEN 1 ELSE 0 END) AS self_count
                    FROM users u
                    JOIN events e ON u.user_id = e.initiator_id
                    WHERE e.chat_id = ? AND e.timestamp >= ?
                    GROUP BY u.user_id
                    HAVING self_count > 0
                    ORDER BY self_count DESC
                    LIMIT 1
                ''', (chat_id, since_str))
                idiot = cursor.fetchone()
                
                logger.info(f"üèÜ –†–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id} –∑–∞ {days} –¥–Ω–µ–π –ø–æ–ª—É—á–µ–Ω—ã")
                return {
                    'king': king,
                    'victim': victim,
                    'idiot': idiot
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
            return {}
    
    async def get_user_stats(self, user_id: int, chat_id: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–æ–±—ã—Ç–∏–π –ø–æ —á–∞—Ç—É
                cursor.execute('''
                    SELECT 
                        SUM(CASE WHEN outcome = 'direct_hit' AND initiator_id = ? THEN 1 ELSE 0 END) as direct_hits,
                        SUM(CASE WHEN outcome = 'splash' AND initiator_id = ? THEN 1 ELSE 0 END) as splash_hits,
                        SUM(CASE WHEN outcome = 'miss' AND initiator_id = ? THEN 1 ELSE 0 END) as self_hits,
                        SUM(CASE WHEN (outcome = 'direct_hit' OR outcome = 'splash' OR outcome = 'special') AND target_id = ? THEN 1 ELSE 0 END) as times_hit
                    FROM events 
                    WHERE chat_id = ? AND (initiator_id = ? OR target_id = ?)
                ''', (user_id, user_id, user_id, user_id, chat_id, user_id, user_id))
                
                result = cursor.fetchone()
                
                if result:
                    stats = {
                        'direct_hits': result[0] or 0,
                        'misses': 0,  # misses —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–∞–∫ self_hits
                        'self_hits': result[2] or 0,
                        'times_hit': result[3] or 0
                    }
                    logger.debug(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}: {stats}")
                    return stats
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ {chat_id}")
                return {}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
            return {}
    
    async def get_chat_stats(self, chat_id: int, days: int = 30) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                since_date = datetime.now() - timedelta(days=days)
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ—Å–∫–æ–≤
                cursor.execute('''
                    SELECT COUNT(*) as total_throws
                    FROM events WHERE chat_id = ? AND timestamp >= ?
                ''', (chat_id, since_date))
                total_throws = cursor.fetchone()[0]
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ö–æ–¥–∞–º
                cursor.execute('''
                    SELECT outcome, COUNT(*) as count
                    FROM events WHERE chat_id = ? AND timestamp >= ?
                    GROUP BY outcome
                ''', (chat_id, since_date))
                outcomes = dict(cursor.fetchall())
                
                # –¢–æ–ø –º–µ—Ç–∞—Ç–µ–ª–µ–π
                cursor.execute('''
                    SELECT u.username, COUNT(*) as throws
                    FROM users u
                    JOIN events e ON u.user_id = e.initiator_id
                    WHERE e.chat_id = ? AND e.timestamp >= ?
                    GROUP BY u.user_id
                    ORDER BY throws DESC
                    LIMIT 3
                ''', (chat_id, since_date))
                top_throwers = cursor.fetchall()
                
                # –¢–æ–ø —Å—Ç—Ä–∞–¥–∞–ª—å—Ü–µ–≤
                cursor.execute('''
                    SELECT u.username, COUNT(*) as hits
                    FROM users u
                    JOIN events e ON u.user_id = e.target_id
                    WHERE e.chat_id = ? AND e.outcome = 'direct_hit' AND e.timestamp >= ?
                    GROUP BY u.user_id
                    ORDER BY hits DESC
                    LIMIT 3
                ''', (chat_id, since_date))
                top_victims = cursor.fetchall()
                
                # –¢–æ–ø –Ω–µ—É–¥–∞—á–Ω–∏–∫–æ–≤ (—Å–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª)
                cursor.execute('''
                    SELECT u.username, u.self_hits
                    FROM users u
                    JOIN events e ON u.user_id = e.initiator_id
                    WHERE e.chat_id = ? AND e.timestamp >= ?
                    GROUP BY u.user_id
                    HAVING u.self_hits > 0
                    ORDER BY u.self_hits DESC
                    LIMIT 3
                ''', (chat_id, since_date))
                top_losers = cursor.fetchall()
                
                # –¢–æ–ø —Å–Ω–∞–π–ø–µ—Ä–æ–≤ (–ª—É—á—à–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π)
                cursor.execute('''
                    SELECT u.username, 
                           COUNT(CASE WHEN e.outcome IN ('direct_hit', 'critical') THEN 1 END) as direct_hits,
                           COUNT(*) as total_throws,
                           CASE 
                               WHEN COUNT(*) > 0 
                               THEN ROUND(COUNT(CASE WHEN e.outcome IN ('direct_hit', 'critical') THEN 1 END) * 100.0 / COUNT(*), 1)
                               ELSE 0 
                           END as accuracy
                    FROM users u
                    JOIN events e ON u.user_id = e.initiator_id
                    WHERE e.chat_id = ? AND e.timestamp >= ?
                    GROUP BY u.user_id
                    HAVING COUNT(*) >= 5
                    ORDER BY accuracy DESC
                    LIMIT 3
                ''', (chat_id, since_date))
                top_snipers = cursor.fetchall()
                
                # –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å
                cursor.execute('''
                    SELECT DATE(timestamp) as date, COUNT(*) as throws
                    FROM events 
                    WHERE chat_id = ? AND timestamp >= ?
                    GROUP BY DATE(timestamp)
                    ORDER BY throws DESC
                    LIMIT 1
                ''', (chat_id, since_date))
                most_active_day = cursor.fetchone()
                
                logger.info(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ {chat_id} –∑–∞ {days} –¥–Ω–µ–π –ø–æ–ª—É—á–µ–Ω–∞")
                return {
                    'total_throws': total_throws,
                    'outcomes': outcomes,
                    'top_throwers': top_throwers,
                    'top_victims': top_victims,
                    'top_losers': top_losers,
                    'top_snipers': top_snipers,
                    'most_active_day': most_active_day
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞ {chat_id}: {e}")
            return {}
    
    async def get_game_stats(self, chat_id: int, days: int = 30) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                since_date = datetime.now() - timedelta(days=days)
                
                # –°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –≥–æ–≤–Ω–æ-—Å—Ç—Ä–∏–∫ (—Å–µ—Ä–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –±—Ä–æ—Å–∫–æ–≤)
                cursor.execute('''
                    SELECT u.username, 
                           (SELECT COUNT(*) FROM (
                               SELECT e1.outcome, 
                                      ROW_NUMBER() OVER (ORDER BY e1.timestamp) as rn
                               FROM events e1 
                               WHERE e1.initiator_id = u.user_id 
                               AND e1.chat_id = ? 
                               AND e1.timestamp >= ?
                               ORDER BY e1.timestamp
                           ) t WHERE t.outcome IN ('direct_hit', 'critical', 'combo'))
                           as streak
                    FROM users u
                    JOIN events e ON u.user_id = e.initiator_id
                    WHERE e.chat_id = ? AND e.timestamp >= ?
                    GROUP BY u.user_id
                    ORDER BY streak DESC
                    LIMIT 1
                ''', (chat_id, since_date, chat_id, since_date))
                longest_streak = cursor.fetchone()
                
                # –ì–æ–≤–Ω–æ-–º–∞—Å—Ç–µ—Ä (–º–µ—Ç–Ω—É–ª –≤–æ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
                cursor.execute('''
                    SELECT u.username, COUNT(DISTINCT e.target_id) as unique_targets
                    FROM users u
                    JOIN events e ON u.user_id = e.initiator_id
                    WHERE e.chat_id = ? AND e.timestamp >= ?
                    GROUP BY u.user_id
                    ORDER BY unique_targets DESC
                    LIMIT 1
                ''', (chat_id, since_date))
                shit_master = cursor.fetchone()
                
                # –ì–æ–≤–Ω–æ-–≤–µ–∑–µ–Ω–∏–µ (–∫—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ –∏–∑–±–µ–≥–∞–ª –ø–æ–ø–∞–¥–∞–Ω–∏–π)
                cursor.execute('''
                    SELECT u.username, 
                           (SELECT COUNT(*) FROM events e2 
                            WHERE e2.target_id = u.user_id 
                            AND e2.chat_id = ? 
                            AND e2.timestamp >= ?) as times_hit,
                           (SELECT COUNT(*) FROM events e3 
                            WHERE e3.initiator_id = u.user_id 
                            AND e3.chat_id = ? 
                            AND e3.timestamp >= ?) as times_thrown
                    FROM users u
                    JOIN events e ON u.user_id = e.initiator_id OR u.user_id = e.target_id
                    WHERE e.chat_id = ? AND e.timestamp >= ?
                    GROUP BY u.user_id
                    HAVING times_thrown >= 3
                    ORDER BY (times_thrown - times_hit) DESC
                    LIMIT 1
                ''', (chat_id, since_date, chat_id, since_date, chat_id, since_date))
                lucky_bastard = cursor.fetchone()
                
                # –ì–æ–≤–Ω–æ-–º–∞–≥ (—á–∞—â–µ –≤—Å–µ–≥–æ –æ—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã)
                cursor.execute('''
                    SELECT u.username, COUNT(*) as special_effects
                    FROM users u
                    JOIN events e ON u.user_id = e.initiator_id
                    WHERE e.chat_id = ? AND e.outcome = 'special' AND e.timestamp >= ?
                    GROUP BY u.user_id
                    ORDER BY special_effects DESC
                    LIMIT 1
                ''', (chat_id, since_date))
                shit_mage = cursor.fetchone()
                
                logger.info(f"üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ {chat_id} –∑–∞ {days} –¥–Ω–µ–π –ø–æ–ª—É—á–µ–Ω–∞")
                return {
                    'longest_streak': longest_streak,
                    'shit_master': shit_master,
                    'lucky_bastard': lucky_bastard,
                    'shit_mage': shit_mage
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞ {chat_id}: {e}")
            return {}
    
    def init_roles(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–æ–ª–∏ –≤ –ë–î
                cursor.execute("SELECT COUNT(*) FROM roles")
                count = cursor.fetchone()[0]
                
                if count > 0:
                    logger.info("üé≠ –†–æ–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ –ë–î")
                    return
                
                # –î–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
                roles_data = [
                    # –ë–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏
                    ('sniper', 'üéØ –°–Ω–∞–π–ø–µ—Ä', 'üéØ', '–ú–∞—Å—Ç–µ—Ä —Ç–æ—á–Ω–æ—Å—Ç–∏', 
                     '+50% –∫ –ø—Ä—è–º–æ–º—É –ø–æ–ø–∞–¥–∞–Ω–∏—é, -30% –∫ —Ä–∞–∑–ª—ë—Ç—É', None, None, '–¢–æ—á–µ—á–Ω—ã–µ —É–¥–∞—Ä—ã, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω –ø–æ –Ω–µ–≤–∏–Ω–æ–≤–Ω—ã–º'),
                    
                    ('bombardier', 'üí£ –ë–æ–º–±–∞—Ä–¥–∏—Ä', 'üí£', '–ú–∞—Å—Å–æ–≤–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ',
                     '+80% –∫ —Ä–∞–∑–ª—ë—Ç—É, -20% –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏', None, None, '–•–∞–æ—Ç–∏—á–Ω—ã–µ –≤–∑—Ä—ã–≤—ã, –º–Ω–æ–≥–æ –∂–µ—Ä—Ç–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ'),
                    
                    ('defender', 'üõ°Ô∏è –û–±–æ—Ä–æ–Ω–µ—Ü', 'üõ°Ô∏è', '–ó–∞—â–∏—Ç–Ω–∏–∫',
                     '–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —à–∞–Ω—Å –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –∞—Ç–∞–∫', None, None, '–ó–∞—â–∏—Ç–Ω–∞—è —Ç–∞–∫—Ç–∏–∫–∞, –æ—Ç–±–∏–≤–∞–µ—Ç –∞—Ç–∞–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ'),
                    
                    # –û–±–∏–¥–Ω—ã–µ —Ä–æ–ª–∏
                    ('drunk_sniper', 'üç∫üéØ –°–Ω–∞–π–ø–µ—Ä-–ø—å—è–Ω–∏—Ü–∞', 'üç∫üéØ', '–¢–æ—á–Ω–æ—Å—Ç—å —Å —Ä–∏—Å–∫–æ–º',
                     '+30% –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ –æ–±—ã—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏', '–ü—Ä–∏ –∂–∞—Ä–µ ‚â•50 —à–∞–Ω—Å –ø—Ä–æ–º–∞—Ö–∞ —É–¥–≤–∞–∏–≤–∞–µ—Ç—Å—è', '–ß–µ–º –±–æ–ª—å—à–µ –∞–≥—Ä–µ—Å—Å–∏–∏, —Ç–µ–º —Ö—É–∂–µ –ø—Ä–∏—Ü–µ–ª', '–¢–æ—á–Ω–æ—Å—Ç—å —Å —Ä–∏—Å–∫–æ–º'),
                    
                    ('berserker', 'ü™ì –ë–µ—Ä—Å–µ—Ä–∫', 'ü™ì', '–Ø—Ä–æ—Å—Ç—å –∏ –º–æ—â—å',
                     '+60% –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —É–¥–∞—Ä–∞–º, +50% –∫ –∫–æ–º–±–æ', '–ö–∞–∂–¥—ã–π –±—Ä–æ—Å–æ–∫ +5 –∫ –∂–∞—Ä—É, —à—Ç—Ä–∞—Ñ –∫ –ø—Ä–æ–º–∞—Ö—É –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è', None, '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞ –±–µ–∑ –ø–æ—â–∞–¥—ã'),
                    
                    ('trickster', 'üÉè –¢—Ä–∏–∫—Å—Ç–µ—Ä', 'üÉè', '–ú–∞—Å—Ç–µ—Ä –æ–±–º–∞–Ω–∞',
                     '+40% –∫ –æ—Å–æ–±—ã–º —ç—Ñ—Ñ–µ–∫—Ç–∞–º', None, '10% —à–∞–Ω—Å –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ "–±—É–º–µ—Ä–∞–Ω–≥" –ø–æ –º–µ—Ç–∞—Ç–µ–ª—é', '–ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ —Ç—Ä—é–∫–∏ –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏'),
                    
                    # –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–æ–ª–∏
                    ('magnet', 'üß≤ –ú–∞–≥–Ω–∏—Ç', 'üß≤', '–§–æ–∫—É—Å-–º–∞—Å—Ç–µ—Ä',
                     '–ü–µ—Ä–≤—ã–π —É–¥–∞—Ä –ø–æ —Ü–µ–ª–∏ –¥–∞—ë—Ç +1 –∫ —Ñ–æ–∫—É—Å—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ', None, '–ü—Ä–∏ —Ñ–æ–∫—É—Å–µ >2 —à–∞–Ω—Å –ø—Ä—è–º–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è ‚Üë', '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞—Ç–∞–∫–∞ –Ω–∞ –æ–¥–Ω—É —Ü–µ–ª—å'),
                    
                    ('saboteur', 'üï≥Ô∏è –°–∞–±–æ—Ç–∞–∂–Ω–∏–∫', 'üï≥Ô∏è', '–ü–æ–¥—Ä—ã–≤–Ω–∏–∫',
                     '–°–Ω–∏–∂–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Ü–µ–ª–∏ –≤ –æ—Ç–≤–µ—Ç', '+30% –∫ –ø—Ä–æ–º–∞—Ö—É —Ü–µ–ª–∏ –Ω–∞ 10 –º–∏–Ω—É—Ç', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –≤–æ–π–Ω–∞', '–ü–æ–¥—Ä—ã–≤–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å'),
                    
                    ('oracle', 'üîÆ –û—Ä–∞–∫—É–ª', 'üîÆ', '–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å',
                     '–ö—É–ª–¥–∞—É–Ω -40% (–±—ã—Å—Ç—Ä–µ–µ –±—Ä–æ—Å–∞–µ—Ç)', '–í–µ—Å "legendary" —É—Ä–µ–∑–∞–Ω –≤ 2 —Ä–∞–∑–∞', '–£–º–µ–µ—Ç —Ç–∞—â–∏—Ç—å "brick" –≤–º–µ—Å—Ç–æ "miss"', '–ß–∞—Å—Ç—ã–µ, –Ω–æ –º–µ–Ω–µ–µ –º–æ—â–Ω—ã–µ –∞—Ç–∞–∫–∏'),
                    
                    # –û–≥–Ω–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏
                    ('pyromaniac', 'üî• –ü–∏—Ä–æ–º–∞–Ω', 'üî•', '–ú–∞—Å—Ç–µ—Ä –æ–≥–Ω—è',
                     '–ñ–∞—Ä —Ä–∞—Å—Ç—ë—Ç –≤–¥–≤–æ–µ –±—ã—Å—Ç—Ä–µ–µ', None, '–ü—Ä–∏ –∂–∞—Ä–µ ‚â•20 –ø–æ–ª—É—á–∞–µ—Ç +50% –∫ –∫—Ä–∏—Ç—É, –ø—Ä–∏ –∂–∞—Ä–µ ‚â•80 —à–∞–Ω—Å "special: bomb/rain"‚Üë', '–≠—Å–∫–∞–ª–∞—Ü–∏—è –∞–≥—Ä–µ—Å—Å–∏–∏ –¥–æ –≤–∑—Ä—ã–≤–∞'),
                    
                    ('shieldbearer', 'üõ°Ô∏è –©–∏—Ç–æ–Ω–æ—Å–µ—Ü', 'üõ°Ô∏è', '–ù–µ–ø—Ä–æ–±–∏–≤–∞–µ–º—ã–π',
                     '–®–∞–Ω—Å –∞–≤—Ç–æ-—Ä–µ—Ñ–ª–µ–∫—Ç–∞ –º–∞–ª—ã—Ö —É–¥–∞—Ä–æ–≤', None, '–§–æ–∫—É—Å –ø–æ –Ω–µ–º—É –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ', '–û–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–∫—Ç–∏–∫–∞ —Å –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞–º–∏'),
                    
                    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
                    ('collector', 'üìé –ö–æ–ª–ª–µ–∫—Ç–æ—Ä', 'üìé', '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —Ü–µ–ª—è–º–∏',
                     '+40% –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ —Ç–µ–º, –ø–æ –∫–æ–º—É —É–∂–µ –µ—Å—Ç—å —Ñ–æ–∫—É—Å', '–ü—Ä–æ—Ç–∏–≤ —Å–≤–µ–∂–∏—Ö —Ü–µ–ª–µ–π –æ–±—ã—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å', None, '–î–æ–±–∏–≤–∞–Ω–∏–µ —É–∂–µ —Ä–∞–Ω–µ–Ω—ã—Ö —Ü–µ–ª–µ–π'),
                    
                    ('teleporter', 'üåÄ –¢–µ–ª–µ–ø–æ—Ä—Ç–µ—Ä', 'üåÄ', '–ü–µ—Ä–µ–∫–∏–¥—ã–≤–∞—Ç–µ–ª—å',
                     '15% —à–∞–Ω—Å –ø–µ—Ä–µ–∫–∏–Ω—É—Ç—å —Ü–µ–ª—å –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞', None, '–¶–µ–ª—å "—Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è" –∫ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É', '–•–∞–æ—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'),
                    
                    ('rocketeer', 'üöÄ –ì–æ–≤–Ω–æ—Ä–∞–∫–µ—Ç—á–∏–∫', 'üöÄ', '–†–∞–∫–µ—Ç–Ω—ã–π —É–¥–∞—Ä',
                     '+30% –∫ —Ä–∞–∑–ª—ë—Ç—É, +20% –∫ –æ—Å–æ–±—ã–º —ç—Ñ—Ñ–µ–∫—Ç–∞–º', '-10% –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏', None, '–ú–æ—â–Ω—ã–µ, –Ω–æ –Ω–µ—Ç–æ—á–Ω—ã–µ –∑–∞–ª–ø—ã'),
                    
                    # –ì—Ä—è–∑–Ω—ã–µ —Ä–æ–ª–∏
                    ('snot_sniper', 'ü§ß –°–æ–ø–ª—è-—Å–Ω–∞–π–ø–µ—Ä', 'ü§ß', '–°–ª–∏–∑–∏—Å—Ç—ã–π —Å—Ç—Ä–µ–ª–æ–∫',
                     '+10% –∫ –ø—Ä–æ–º–∞—Ö—É', '20% —à–∞–Ω—Å —É–¥–≤–æ–∏—Ç—å –ø—Ä–æ–º–∞—Ö', '–°–ª—É—á–∞–π–Ω—ã–µ "—Å–æ–ø–ª–∏–≤—ã–µ" –ø—Ä–æ–º–∞—Ö–∏', '–ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å'),
                    
                    ('acid_clown', 'üß™ü§° –ö–∏—Å–ª–æ—Ç–Ω—ã–π –∫–ª–æ—É–Ω', 'üß™ü§°', '–•–∏–º–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä—Ä–æ—Ä',
                     '–û—Å–æ–±—ã–µ —Ö–∏–º–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã', None, '–¢–æ–∫—Å–∏—á–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∏ —Ö–∏–º–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏', '–•–∏–º–∏—á–µ—Å–∫–∞—è –≤–æ–π–Ω–∞'),
                    
                    ('counter_guru', 'üîÅ –û–±—Ä–∞—Ç–∫–∞-–≥—É—Ä—É', 'üîÅ', '–ú–∞—Å—Ç–µ—Ä –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫',
                     '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Ç–≤–µ—Ç–Ω—ã—Ö —É–¥–∞—Ä–∞—Ö', None, '–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏ –∏ –æ—Ç–≤–µ—Ç–Ω—ã–µ —É–¥–∞—Ä—ã', '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫')
                ]
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–æ–ª–∏ –≤ –ë–î
                cursor.executemany('''
                    INSERT INTO roles (role_key, role_name, emoji, description, bonuses, penalties, special_effects, style)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', roles_data)
                
                conn.commit()
                logger.info(f"üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(roles_data)} —Ä–æ–ª–µ–π –≤ –ë–î")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–ª–µ–π: {e}")
    
    async def get_role_info(self, role_key: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT role_key, role_name, emoji, description, bonuses, penalties, special_effects, style
                    FROM roles WHERE role_key = ?
                ''', (role_key,))
                result = cursor.fetchone()
                
                if result:
                    return {
                        'role_key': result[0],
                        'role_name': result[1],
                        'emoji': result[2],
                        'description': result[3],
                        'bonuses': result[4],
                        'penalties': result[5],
                        'special_effects': result[6],
                        'style': result[7]
                    }
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª–∏ {role_key}: {e}")
            return None
