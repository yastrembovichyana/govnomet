import random
import asyncio
from typing import List, Tuple, Dict, Optional
from config import OUTCOME_PROBABILITIES, GAME_MESSAGES
from logger_config import get_logger

logger = get_logger('game')

class GameLogic:
    def __init__(self):
        self.outcomes = list(OUTCOME_PROBABILITIES.keys())
        self.weights = list(OUTCOME_PROBABILITIES.values())
        self.combo_counters = {}  # –°—á–µ—Ç—á–∏–∫–∏ –∫–æ–º–±–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.streak_counters = {}  # –°—á–µ—Ç—á–∏–∫–∏ —Å–µ—Ä–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("üéÆ –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ì–æ–≤–Ω–æ–ú—ë—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def determine_outcome(self, user_id: int = None) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–∞ –±—Ä–æ—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –∏ –∫–æ–º–±–æ"""
        # –ë–∞–∑–æ–≤—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        base_weights = self.weights.copy()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –∑–∞ –∫–æ–º–±–æ –∏ —Å–µ—Ä–∏–∏
        if user_id is not None:
            combo_count = self.combo_counters.get(user_id, 0)
            streak_count = self.streak_counters.get(user_id, 0)
            
            # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–º–±–æ
            if combo_count >= 5:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –Ω–∞ critical –∏ combo
                base_weights[4] *= 2  # critical
                base_weights[5] *= 3   # combo
                logger.debug(f"üîÑ –ë–æ–Ω—É—Å –∫–æ–º–±–æ x{combo_count} –ø—Ä–∏–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é
            if streak_count >= 10:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –Ω–∞ legendary
                base_weights[6] *= 4   # legendary
                logger.debug(f"üî• –ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏ x{streak_count} –ø—Ä–∏–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        outcome = random.choices(self.outcomes, weights=base_weights, k=1)[0]
        logger.debug(f"üé≤ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∏—Å—Ö–æ–¥ –±—Ä–æ—Å–∫–∞: {outcome}")
        return outcome
    
    def get_random_message(self, outcome: str, **kwargs) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏—Å—Ö–æ–¥–∞"""
        if outcome not in GAME_MESSAGES:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ö–æ–¥: {outcome}")
            return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üí©"
        
        messages = GAME_MESSAGES[outcome]
        message = random.choice(messages)
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        formatted_message = message.format(**kwargs)
        logger.debug(f"üí¨ –í—ã–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ö–æ–¥–∞ {outcome}: {formatted_message}")
        return formatted_message
    
    def select_targets(self, participants: List[Tuple[int, str]], 
                      initiator_id: int, outcome: str) -> List[Tuple[int, str]]:
        """–í—ã–±–æ—Ä —Ü–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ö–æ–¥–∞"""
        if not participants:
            logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç")
            return []
        
        # –£–±–∏—Ä–∞–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ü–µ–ª–µ–π
        available_targets = [p for p in participants if p[0] != initiator_id]
        
        if not available_targets:
            # –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫, –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ü–µ–ª—å—é
            logger.info(f"üéØ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä {initiator_id} - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫, —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ü–µ–ª—å—é")
            return [participants[0]]
        
        if outcome == 'direct_hit':
            # –ü—Ä—è–º–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ - –æ–¥–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Ü–µ–ª—å
            target = random.choice(available_targets)
            logger.debug(f"üéØ –ü—Ä—è–º–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ: –≤—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å {target[1]} (ID: {target[0]})")
            return [target]
        
        elif outcome == 'miss':
            # –ü—Ä–æ–º–∞—Ö - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Å–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª
            initiator = next((p for p in participants if p[0] == initiator_id), None)
            if initiator:
                logger.debug(f"ü§° –ü—Ä–æ–º–∞—Ö: –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä {initiator[1]} (ID: {initiator[0]}) —Å–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª")
                return [initiator]
            else:
                logger.warning(f"‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä {initiator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                return available_targets[:1]
        
        elif outcome == 'splash':
            # –†–∞–∑–ª–µ—Ç–µ–ª–æ—Å—å - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–µ–ª–µ–π (2-4)
            num_targets = min(random.randint(2, 4), len(available_targets))
            targets = random.sample(available_targets, num_targets)
            target_names = [t[1] for t in targets]
            logger.debug(f"ü§Æ –†–∞–∑–ª–µ—Ç–µ–ª–æ—Å—å: –≤—ã–±—Ä–∞–Ω–æ {num_targets} —Ü–µ–ª–µ–π: {target_names}")
            return targets
        
        elif outcome == 'special':
            # –û—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            effect_type = random.choice(['boomerang', 'avalanche', 'brick', 'bomb', 'rain', 'lightning', 'fire', 'ice', 'rainbow', 'theater', 'circus', 'art', 'music', 'movie', 'game'])
            logger.debug(f"‚ö° –û—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç: {effect_type}")
            
            if effect_type == 'boomerang':
                # –ë—É–º–µ—Ä–∞–Ω–≥ - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Å–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª
                initiator = next((p for p in participants if p[0] == initiator_id), None)
                if initiator:
                    logger.debug(f"üîÑ –ë—É–º–µ—Ä–∞–Ω–≥: –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä {initiator[1]} (ID: {initiator[0]}) —Å–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª")
                    return [initiator]
                else:
                    return available_targets[:1]
            
            elif effect_type == 'avalanche':
                # –õ–∞–≤–∏–Ω–∞ - –≤–µ—Å—å —á–∞—Ç
                logger.debug(f"üå™Ô∏è –õ–∞–≤–∏–Ω–∞: –≤–µ—Å—å —á–∞—Ç ({len(available_targets)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) –æ–±–æ—Å—Ä–∞–Ω")
                return available_targets
            
            elif effect_type == 'brick':
                # –ö–∏—Ä–ø–∏—á - —Å–ª—É—á–∞–π–Ω–∞—è —Ü–µ–ª—å
                target = random.choice(available_targets)
                logger.debug(f"üß± –ö–∏—Ä–ø–∏—á: –≤—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å {target[1]} (ID: {target[0]})")
                return [target]
            
            elif effect_type == 'bomb':
                # –ì–æ–≤–Ω–æ–±–æ–º–±–∞ - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–µ–ª–µ–π
                num_targets = min(random.randint(3, 5), len(available_targets))
                targets = random.sample(available_targets, num_targets)
                target_names = [t[1] for t in targets]
                logger.debug(f"üí£ –ì–æ–≤–Ω–æ–±–æ–º–±–∞: –≤—ã–±—Ä–∞–Ω–æ {num_targets} —Ü–µ–ª–µ–π: {target_names}")
                return targets
            
            elif effect_type == 'rain':
                # –ì–æ–≤–Ω–æ–¥–æ–∂–¥—å - –≤–µ—Å—å —á–∞—Ç
                logger.debug(f"üåßÔ∏è –ì–æ–≤–Ω–æ–¥–æ–∂–¥—å: –≤–µ—Å—å —á–∞—Ç ({len(available_targets)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) –æ–±–æ—Å—Ä–∞–Ω")
                return available_targets
            
            elif effect_type in ['lightning', 'fire', 'ice', 'rainbow', 'theater', 'circus', 'art', 'music', 'movie', 'game']:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã - —Å–ª—É—á–∞–π–Ω–∞—è —Ü–µ–ª—å
                target = random.choice(available_targets)
                logger.debug(f"üé≠ –û—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç {effect_type}: –≤—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å {target[1]} (ID: {target[0]})")
                return [target]
        
        elif outcome == 'critical':
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ - –æ–¥–Ω–∞ —Ü–µ–ª—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —É—Ä–æ–Ω–æ–º
            target = random.choice(available_targets)
            logger.debug(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ: –≤—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å {target[1]} (ID: {target[0]})")
            return [target]
        
        elif outcome == 'combo':
            # –ö–æ–º–±–æ-—ç—Ñ—Ñ–µ–∫—Ç - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª–µ–π (3-5)
            num_targets = min(random.randint(3, 5), len(available_targets))
            targets = random.sample(available_targets, num_targets)
            target_names = [t[1] for t in targets]
            logger.debug(f"üîÑ –ö–æ–º–±–æ: –≤—ã–±—Ä–∞–Ω–æ {num_targets} —Ü–µ–ª–µ–π: {target_names}")
            return targets
        
        elif outcome == 'legendary':
            # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∏—Å—Ö–æ–¥ - –≤–µ—Å—å —á–∞—Ç
            logger.debug(f"üëë –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∏—Å—Ö–æ–¥: –≤–µ—Å—å —á–∞—Ç ({len(available_targets)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) –æ–±–æ—Å—Ä–∞–Ω")
            return available_targets
        
        logger.debug(f"üéØ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å")
        return available_targets[:1]
    
    def format_targets_text(self, targets: List[Tuple[int, str]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π –≤ —Ç–µ–∫—Å—Ç"""
        if not targets:
            logger.debug("üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π: —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            return "–Ω–∏–∫–æ–≥–æ"
        
        usernames = [f"@{target[1]}" if target[1] else f"user{target[0]}" for target in targets]
        
        if len(usernames) == 1:
            result = usernames[0]
        elif len(usernames) == 2:
            result = f"{usernames[0]} –∏ {usernames[1]}"
        else:
            result = f"{', '.join(usernames[:-1])} –∏ {usernames[-1]}"
        
        logger.debug(f"üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π: {result}")
        return result
    
    def process_throw(self, initiator_id: int, initiator_username: str,
                     participants: List[Tuple[int, str]], chat_id: int) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –≥–æ–≤–Ω–∞"""
        try:
            logger.info(f"üí© –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞: {initiator_username} (ID: {initiator_id}) –≤ —á–∞—Ç–µ {chat_id}")
            logger.debug(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞: {len(participants)}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥
            outcome = self.determine_outcome(initiator_id)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ü–µ–ª–∏
            targets = self.select_targets(participants, initiator_id, outcome)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–º–±–æ –∏ —Å–µ—Ä–∏–π
            combo_count = self.update_combo_counter(initiator_id, outcome)
            streak_count = self.update_streak_counter(initiator_id, outcome)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if outcome == 'direct_hit':
                target = targets[0]
                message = self.get_random_message(outcome, 
                                               initiator=initiator_username,
                                               target=target[1] if target[1] else f"user{target[0]}")
            
            elif outcome == 'miss':
                message = self.get_random_message(outcome, initiator=initiator_username)
            
            elif outcome == 'splash':
                targets_text = self.format_targets_text(targets)
                message = self.get_random_message(outcome, 
                                               initiator=initiator_username,
                                               targets=targets_text)
            
            elif outcome == 'special':
                if len(targets) == 1 and targets[0][0] == initiator_id:
                    # –ë—É–º–µ—Ä–∞–Ω–≥ –∏–ª–∏ —Å–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª
                    message = self.get_random_message(outcome, initiator=initiator_username)
                else:
                    targets_text = self.format_targets_text(targets)
                    message = self.get_random_message(outcome, 
                                                   initiator=initiator_username,
                                                   targets=targets_text)
            
            elif outcome == 'critical':
                target = targets[0]
                message = self.get_random_message(outcome, 
                                               initiator=initiator_username,
                                               target=target[1] if target[1] else f"user{target[0]}")
            
            elif outcome == 'combo':
                targets_text = self.format_targets_text(targets)
                message = self.get_random_message(outcome, 
                                               initiator=initiator_username,
                                               targets=targets_text)
            
            elif outcome == 'legendary':
                targets_text = self.format_targets_text(targets)
                message = self.get_random_message(outcome, 
                                               initiator=initiator_username,
                                               targets=targets_text)
            
            result = {
                'outcome': outcome,
                'message': message,
                'targets': targets,
                'initiator_id': initiator_id,
                'chat_id': chat_id,
                'combo_count': combo_count,
                'streak_count': streak_count,
                'combo_bonus': self.get_combo_bonus(combo_count),
                'streak_bonus': self.get_streak_bonus(streak_count)
            }
            
            logger.info(f"‚úÖ –ë—Ä–æ—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {outcome} -> {len(targets)} —Ü–µ–ª–µ–π")
            logger.debug(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ—Å–∫–∞: {e}")
            return {
                'outcome': 'miss',
                'message': f"{initiator_username} —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –æ–Ω –æ–±–æ—Å—Ä–∞–ª—Å—è —Å–∞–º üí©",
                'targets': [(initiator_id, initiator_username)],
                'initiator_id': initiator_id,
                'chat_id': chat_id
            }
    
    def process_throw_at_target(self, initiator_id: int, initiator_username: str,
                               target_id: int, target_username: str, chat_id: int) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –≥–æ–≤–Ω–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ü–µ–ª—å"""
        try:
            logger.info(f"üí© –¶–µ–ª–µ–≤–æ–π –±—Ä–æ—Å–æ–∫: {initiator_username} (ID: {initiator_id}) -> {target_username} (ID: {target_id}) –≤ —á–∞—Ç–µ {chat_id}")
            
            # –î–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –±—Ä–æ—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –ø—Ä—è–º–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–º–∞—Ö–∞
            outcomes = ['direct_hit', 'miss', 'splash', 'special']
            weights = [60, 15, 20, 5]  # 60% –ø–æ–ø–∞–¥–∞–Ω–∏–µ, 15% –ø—Ä–æ–º–∞—Ö, 20% —Ä–∞–∑–ª–µ—Ç, 5% –æ—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç
            
            outcome = random.choices(outcomes, weights=weights, k=1)[0]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–º–±–æ –∏ —Å–µ—Ä–∏–π
            combo_count = self.update_combo_counter(initiator_id, outcome)
            streak_count = self.update_streak_counter(initiator_id, outcome)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ö–æ–¥–∞
            if outcome == 'direct_hit':
                message = self.get_random_message(outcome, 
                                               initiator=initiator_username,
                                               target=target_username)
                targets = [(target_id, target_username)]
            
            elif outcome == 'miss':
                message = self.get_random_message(outcome, initiator=initiator_username)
                targets = [(initiator_id, initiator_username)]
            
            elif outcome == 'splash':
                # –†–∞–∑–ª–µ—Ç–µ–ª–æ—Å—å - —Ü–µ–ª—å + —Å–ª—É—á–∞–π–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
                targets = [(target_id, target_username)]
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
                message = self.get_random_message(outcome, 
                                               initiator=initiator_username,
                                               targets=f"{target_username} –∏ –¥—Ä—É–≥–∏—Ö")
            
            elif outcome == 'special':
                # –û—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –±—Ä–æ—Å–∫–∞
                effect_type = random.choice(['boomerang', 'avalanche', 'brick', 'bomb'])
                logger.debug(f"‚ö° –û—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –±—Ä–æ—Å–∫–∞: {effect_type}")
                
                if effect_type == 'boomerang':
                    message = f"@{initiator_username} –º–µ—Ç–Ω—É–ª –≥–æ–≤–Ω–æ –≤ @{target_username}, –Ω–æ –æ–Ω–æ –≤–µ—Ä–Ω—É–ª–æ—Å—å –±—É–º–µ—Ä–∞–Ω–≥–æ–º! ü§°üí©"
                    targets = [(initiator_id, initiator_username)]
                elif effect_type == 'avalanche':
                    message = f"@{initiator_username} –º–µ—Ç–Ω—É–ª –≥–æ–≤–Ω–æ –≤ @{target_username}, –Ω–æ —É—Å—Ç—Ä–æ–∏–ª –≥–æ–≤–Ω–æ–ª–∞–≤–∏–Ω—É! üå®Ô∏èüí©"
                    targets = [(target_id, target_username)]
                elif effect_type == 'brick':
                    message = f"@{initiator_username} –º–µ—Ç–Ω—É–ª –≥–æ–≤–Ω–æ –≤ @{target_username}, –Ω–æ –ø–æ–ø–∞–ª –∫–∏—Ä–ø–∏—á–æ–º! üß±üí©"
                    targets = [(target_id, target_username)]
                elif effect_type == 'bomb':
                    message = f"@{initiator_username} –º–µ—Ç–Ω—É–ª –≥–æ–≤–Ω–æ –≤ @{target_username}, –Ω–æ –æ–Ω–æ –≤–∑–æ—Ä–≤–∞–ª–æ—Å—å! üí£üí©"
                    targets = [(target_id, target_username)]
            
            result = {
                'outcome': outcome,
                'message': message,
                'targets': targets,
                'initiator_id': initiator_id,
                'chat_id': chat_id,
                'combo_count': combo_count,
                'streak_count': streak_count,
                'combo_bonus': self.get_combo_bonus(combo_count),
                'streak_bonus': self.get_streak_bonus(streak_count)
            }
            
            logger.info(f"‚úÖ –¶–µ–ª–µ–≤–æ–π –±—Ä–æ—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {outcome} -> {target_username}")
            logger.debug(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –±—Ä–æ—Å–∫–∞: {e}")
            return {
                'outcome': 'miss',
                'message': f"{initiator_username} —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –æ–Ω –æ–±–æ—Å—Ä–∞–ª—Å—è —Å–∞–º üí©",
                'targets': [(initiator_id, initiator_username)],
                'initiator_id': initiator_id,
                'chat_id': chat_id
            }
    
    def get_emoji_for_outcome(self, outcome: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∏—Å—Ö–æ–¥–∞"""
        emojis = {
            'direct_hit': 'üéØüí©',
            'miss': 'ü§°üí©',
            'splash': 'ü§Æüí©',
            'special': '‚ö°üí©',
            'critical': 'üí•üí©',
            'combo': 'üîÑüí©',
            'legendary': 'üëëüí©'
        }
        emoji = emojis.get(outcome, 'üí©')
        logger.debug(f"üòÄ –≠–º–æ–¥–∑–∏ –¥–ª—è –∏—Å—Ö–æ–¥–∞ {outcome}: {emoji}")
        return emoji
    
    def update_combo_counter(self, user_id: int, outcome: str) -> int:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–º–±–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.combo_counters:
            self.combo_counters[user_id] = 0
        
        if outcome in ['direct_hit', 'critical', 'combo']:
            self.combo_counters[user_id] += 1
            logger.debug(f"üîÑ –ö–æ–º–±–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.combo_counters[user_id]}")
        else:
            self.combo_counters[user_id] = 0
            logger.debug(f"üîÑ –°–±—Ä–æ—Å –∫–æ–º–±–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return self.combo_counters[user_id]
    
    def update_streak_counter(self, user_id: int, outcome: str) -> int:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–µ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.streak_counters:
            self.streak_counters[user_id] = 0
        
        if outcome in ['direct_hit', 'critical', 'combo', 'legendary']:
            self.streak_counters[user_id] += 1
            logger.debug(f"üî• –°–µ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.streak_counters[user_id]}")
        else:
            self.streak_counters[user_id] = 0
            logger.debug(f"üî• –°–±—Ä–æ—Å —Å–µ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return self.streak_counters[user_id]
    
    def get_combo_bonus(self, combo_count: int) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –∑–∞ –∫–æ–º–±–æ"""
        if combo_count >= 10:
            return 3.0  # –¢—Ä–æ–π–Ω–æ–π —É—Ä–æ–Ω
        elif combo_count >= 5:
            return 2.0  # –î–≤–æ–π–Ω–æ–π —É—Ä–æ–Ω
        elif combo_count >= 3:
            return 1.5  # –ü–æ–ª—É—Ç–æ—Ä–Ω—ã–π —É—Ä–æ–Ω
        else:
            return 1.0  # –û–±—ã—á–Ω—ã–π —É—Ä–æ–Ω
    
    def get_streak_bonus(self, streak_count: int) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –∑–∞ —Å–µ—Ä–∏—é"""
        if streak_count >= 20:
            return 4.0  # –ß–µ—Ç–≤–µ—Ä–Ω–æ–π —É—Ä–æ–Ω
        elif streak_count >= 15:
            return 3.0  # –¢—Ä–æ–π–Ω–æ–π —É—Ä–æ–Ω
        elif streak_count >= 10:
            return 2.5  # –î–≤–æ–π–Ω–æ–π —Å –ø–æ–ª–æ–≤–∏–Ω–æ–π —É—Ä–æ–Ω
        elif streak_count >= 5:
            return 2.0  # –î–≤–æ–π–Ω–æ–π —É—Ä–æ–Ω
        else:
            return 1.0  # –û–±—ã—á–Ω—ã–π —É—Ä–æ–Ω
