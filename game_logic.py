import random
import asyncio
from typing import List, Tuple, Dict, Optional, Any
from datetime import datetime, timedelta
from config import OUTCOME_PROBABILITIES, GAME_MESSAGES
from logger_config import get_logger

logger = get_logger('game')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏
ROLE_DURATION = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MIN_THROW_INTERVAL = 5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –±—Ä–æ—Å–∫–∞–º–∏
FOCUS_PENALTY_DURATION = 300  # 5 –º–∏–Ω—É—Ç —à—Ç—Ä–∞—Ñ–∞ –∑–∞ —Ñ–æ–∫—É—Å

class GameLogic:
    def __init__(self):
        self.outcomes = list(OUTCOME_PROBABILITIES.keys())
        self.weights = list(OUTCOME_PROBABILITIES.values())
        self.combo_counters = {}  # –°—á–µ—Ç—á–∏–∫–∏ –∫–æ–º–±–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.streak_counters = {}  # –°—á–µ—Ç—á–∏–∫–∏ —Å–µ—Ä–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏
        self.user_roles = {}  # user_id -> (role, expires_at)
        self.user_heat = {}   # user_id -> heat (0-100)
        self.user_scores = {} # user_id -> score
        self.focus_stacks = {} # (initiator_id, target_id, chat_id) -> stacks
        self.last_throws = {} # user_id -> timestamp
        self.cooldowns = {}   # (initiator_id, target_id, chat_id) -> penalty_until
        self.user_debuffs: dict[int, dict] = {}  # —Å–∞–±–æ—Ç–∞–∂–Ω–∏–∫ –≤–µ—à–∞–µ—Ç –¥–µ–±–∞—Ñ—Ñ
        logger.info("üéÆ –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ì–æ–≤–Ω–æ–ú—ë—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # ---------------------- –ù–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞: —Ä–æ–ª–∏ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã ----------------------
    def assign_random_role(self, user_id: int) -> str:
        """–ù–∞–∑–Ω–∞—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ 1 —á–∞—Å"""
        roles = [
            'sniper', 'bombardier', 'defender',
            'drunk_sniper', 'berserker', 'trickster', 'magnet', 'saboteur',
            'oracle', 'pyromaniac', 'shieldbearer', 'collector', 'teleporter',
            'rocketeer', 'snot_sniper', 'acid_clown', 'counter_guru'
        ]
        role = random.choice(roles)
        expires_at = datetime.now() + timedelta(seconds=ROLE_DURATION)
        self.user_roles[user_id] = (role, expires_at)
        logger.info(f"üé≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å {role} –¥–æ {expires_at}")
        return role
    
    def get_user_role(self, user_id: int) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None"""
        if user_id not in self.user_roles:
            return None
        
        role, expires_at = self.user_roles[user_id]
        if datetime.now() > expires_at:
            del self.user_roles[user_id]
            return None
        
        return role
    
    def apply_role_modifiers(self, base_weights: List[float], role: str) -> List[float]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ä–æ–ª–∏ –∫ –±–∞–∑–æ–≤—ã–º –≤–µ—Å–∞–º –∏—Å—Ö–æ–¥–∞"""
        modified_weights = base_weights.copy()
        
        if role == 'sniper':
            # –°–Ω–∞–π–ø–µ—Ä: +—Ç–æ—á–Ω–æ—Å—Ç—å, -—Ä–∞–∑–ª–µ—Ç
            modified_weights[0] *= 1.5  # direct_hit
            modified_weights[2] *= 0.7  # splash
            logger.debug(f"üéØ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–Ω–∞–π–ø–µ—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω: —Ç–æ—á–Ω–æ—Å—Ç—å‚Üë, —Ä–∞–∑–ª–µ—Ç‚Üì")
        
        elif role == 'bombardier':
            # –ë–æ–º–±–∞—Ä–¥–∏—Ä: +—Ä–∞–∑–ª–µ—Ç, -—Ç–æ—á–Ω–æ—Å—Ç—å
            modified_weights[0] *= 0.8  # direct_hit
            modified_weights[2] *= 1.8  # splash
            logger.debug(f"üí£ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ–º–±–∞—Ä–¥–∏—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω: —Ä–∞–∑–ª–µ—Ç‚Üë, —Ç–æ—á–Ω–æ—Å—Ç—å‚Üì")
        
        elif role == 'defender':
            # –û–±–æ—Ä–æ–Ω–µ—Ü: +—à–∞–Ω—Å –æ—Ç—Ä–∞–∂–µ–Ω–∏—è
            # –≠—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –≤ –ª–æ–≥–∏–∫–µ –∏—Å—Ö–æ–¥–∞
            logger.debug(f"üõ°Ô∏è –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±–æ—Ä–æ–Ω—Ü–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω: –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ‚Üë")

        elif role == 'drunk_sniper':
            modified_weights[0] *= 1.3
            logger.debug("üç∫üéØ –ü—å—è–Ω—ã–π —Å–Ω–∞–π–ø–µ—Ä: –±–∞–∑–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å‚Üë")
        elif role == 'berserker':
            modified_weights[4] *= 1.6  # critical
            modified_weights[5] *= 1.5  # combo
            logger.debug("ü™ì –ë–µ—Ä—Å–µ—Ä–∫: –∫—Ä–∏—Ç/–∫–æ–º–±–æ‚Üë")
        elif role == 'trickster':
            modified_weights[3] *= 1.4  # special
            logger.debug("üÉè –¢—Ä–∏–∫—Å—Ç–µ—Ä: special‚Üë")
        elif role == 'oracle':
            modified_weights[6] *= 0.5  # legendary‚Üì
            logger.debug("üîÆ –û—Ä–∞–∫—É–ª: legendary‚Üì")
        elif role == 'pyromaniac':
            modified_weights[4] *= 1.2  # –∫—Ä–∏—Ç –Ω–µ–º–Ω–æ–≥–æ‚Üë
            logger.debug("üî• –ü–∏—Ä–æ–º–∞–Ω: –∫—Ä–∏—Ç —Å–ª–µ–≥–∫–∞‚Üë")
        elif role == 'rocketeer':
            modified_weights[2] *= 1.3
            modified_weights[3] *= 1.2
            modified_weights[0] *= 0.9
            logger.debug("üöÄ –†–∞–∫–µ—Ç—á–∏–∫: splash/special‚Üë, —Ç–æ—á–Ω–æ—Å—Ç—å‚Üì")
        elif role == 'snot_sniper':
            modified_weights[1] *= 1.1
            logger.debug("ü§ß –°–æ–ø–ª—è-—Å–Ω–∞–π–ø–µ—Ä: –ø—Ä–æ–º–∞—Ö —Å–ª–µ–≥–∫–∞‚Üë")
        
        return modified_weights
    
    def calculate_focus_penalty(self, initiator_id: int, target_id: int, chat_id: int) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —à—Ç—Ä–∞—Ñ –∑–∞ —Ñ–æ–∫—É—Å –Ω–∞ –æ–¥–Ω—É —Ü–µ–ª—å"""
        key = (initiator_id, target_id, chat_id)
        stacks = self.focus_stacks.get(key, 0)
        
        if stacks == 0:
            return 1.0
        
        # –ö–∞–∂–¥—ã–π –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —É–¥–∞—Ä –ø–æ –æ–¥–Ω–æ–π —Ü–µ–ª–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à—Ç—Ä–∞—Ñ
        penalty = 1.0 + (stacks * 0.3)  # +30% –∑–∞ –∫–∞–∂–¥—ã–π —É–¥–∞—Ä
        logger.debug(f"üéØ –®—Ç—Ä–∞—Ñ –∑–∞ —Ñ–æ–∫—É—Å {initiator_id}->{target_id}: {penalty:.2f}x (stacks: {stacks})")
        return penalty
    
    def calculate_heat_bonus(self, user_id: int) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å/—à—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∞–≥—Ä–µ—Å—Å–æ—Ä–∞"""
        heat = self.user_heat.get(user_id, 0)
        
        if heat <= 20:
            return 1.0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è
        elif heat <= 50:
            return 1.2  # –õ–µ–≥–∫–∏–π –±–æ–Ω—É—Å
        elif heat <= 80:
            return 1.5  # –°—Ä–µ–¥–Ω–∏–π –±–æ–Ω—É—Å
        else:
            return 2.0  # –í—ã—Å–æ–∫–∏–π –±–æ–Ω—É—Å (–Ω–æ –∏ –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)
    
    def calculate_comeback_bonus(self, user_id: int, chat_id: int) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å –∫–∞–º–±—ç–∫–∞ –¥–ª—è –æ—Ç—Å—Ç–∞—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ë–î - –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π —Å—á—ë—Ç –≤ —á–∞—Ç–µ
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
        return 1.0
    
    def check_cooldown(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫—É–ª–¥–∞—É–Ω–µ"""
        if user_id not in self.last_throws:
            return False
        
        last_throw = self.last_throws[user_id]
        time_since = (datetime.now() - last_throw).total_seconds()
        # –û—Ä–∞–∫—É–ª: –∫—É–ª–¥–∞—É–Ω –∫–æ—Ä–æ—á–µ
        role = self.get_user_role(user_id)
        effective_cd = MIN_THROW_INTERVAL * (0.6 if role == 'oracle' else 1.0)
        if time_since < effective_cd:
            logger.debug(f"‚è∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –∫—É–ª–¥–∞—É–Ω–µ: {effective_cd - time_since:.1f}s –æ—Å—Ç–∞–ª–æ—Å—å")
            return True
        
        return False
    
    def update_focus_stacks(self, initiator_id: int, target_id: int, chat_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á—ë—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞ –Ω–∞ —Ü–µ–ª—å"""
        key = (initiator_id, target_id, chat_id)
        self.focus_stacks[key] = self.focus_stacks.get(key, 0) + 1
        logger.debug(f"üéØ –§–æ–∫—É—Å {initiator_id}->{target_id}: {self.focus_stacks[key]} stacks")
    
    def update_user_heat(self, user_id: int, delta: int = 1):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç heat –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (0-100)"""
        current_heat = self.user_heat.get(user_id, 0)
        new_heat = max(0, min(100, current_heat + delta))
        self.user_heat[user_id] = new_heat
        logger.debug(f"üî• Heat –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_heat} -> {new_heat}")
    
    def update_user_score(self, user_id: int, delta: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_score = self.user_scores.get(user_id, 0)
        self.user_scores[user_id] = current_score + delta
        logger.debug(f"üìä –°—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_score} -> {self.user_scores[user_id]}")
    
    def record_throw(self, user_id: int):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.last_throws[user_id] = datetime.now()
    
    # ---------------------- –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏—Å—Ö–æ–¥–∞ ----------------------
    def determine_outcome(self, user_id: int = None, target_id: Optional[int] = None, chat_id: Optional[int] = None) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–∞ –±—Ä–æ—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –∏ –∫–æ–º–±–æ"""
        # –ë–∞–∑–æ–≤—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        base_weights = self.weights.copy()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –∑–∞ –∫–æ–º–±–æ –∏ —Å–µ—Ä–∏–∏
        if user_id is not None:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ä–æ–ª–∏
            role = self.get_user_role(user_id)
            if role:
                base_weights = self.apply_role_modifiers(base_weights, role)
                heat = self.user_heat.get(user_id, 0)
                if role == 'drunk_sniper':
                    if heat >= 50:
                        base_weights[1] *= 2.0  # miss
                    else:
                        base_weights[0] *= 1.3
                if role == 'pyromaniac':
                    if heat >= 20:
                        base_weights[4] *= 1.5
                    if heat >= 80:
                        base_weights[3] *= 1.5
                if role == 'collector' and target_id is not None and chat_id is not None:
                    stacks = self.focus_stacks.get((user_id, target_id, chat_id), 0)
                    if stacks > 0:
                        base_weights[0] *= 1.4
                if role == 'snot_sniper' and random.random() < 0.2:
                    base_weights[1] *= 2.0
            
            combo_count = self.combo_counters.get(user_id, 0)
            streak_count = self.streak_counters.get(user_id, 0)
            
            # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–º–±–æ
            if combo_count >= 5:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –Ω–∞ critical –∏ combo
                base_weights[4] *= 2  # critical
                base_weights[5] *= 3   # combo
                logger.debug(f"üîÑ –ë–æ–Ω—É—Å –∫–æ–º–±–æ x{combo_count} –ø—Ä–∏–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é
            if streak_count >= 10:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –Ω–∞ legendary
                base_weights[6] *= 4   # legendary
                logger.debug(f"üî• –ë–æ–Ω—É—Å —Å–µ—Ä–∏–∏ x{streak_count} –ø—Ä–∏–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
        total_weight = sum(base_weights)
        base_weights = [w / total_weight for w in base_weights]
        
        outcome = random.choices(self.outcomes, weights=base_weights, k=1)[0]
        logger.debug(f"üé≤ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∏—Å—Ö–æ–¥ –±—Ä–æ—Å–∫–∞: {outcome}")
        return outcome
    
    def get_random_message(self, outcome: str, **kwargs) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏—Å—Ö–æ–¥–∞"""
        if outcome not in GAME_MESSAGES:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ö–æ–¥: {outcome}")
            return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üí©"
        
        messages = GAME_MESSAGES[outcome]
        message = random.choice(messages)
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        formatted_message = message.format(**kwargs)
        logger.debug(f"üí¨ –í—ã–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ö–æ–¥–∞ {outcome}: {formatted_message}")
        return formatted_message
    
    def select_targets(self, participants: List[Tuple[int, str]], 
                      initiator_id: int, outcome: str) -> List[Tuple[int, str]]:
        """–í—ã–±–æ—Ä —Ü–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ö–æ–¥–∞"""
        if not participants:
            logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç")
            return []
        
        # –£–±–∏—Ä–∞–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ü–µ–ª–µ–π
        available_targets = [p for p in participants if p[0] != initiator_id]
        
        if not available_targets:
            # –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫, –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ü–µ–ª—å—é
            logger.info(f"üéØ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä {initiator_id} - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫, —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ü–µ–ª—å—é")
            return [participants[0]]
        
        if outcome == 'direct_hit':
            # –ü—Ä—è–º–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ - –æ–¥–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Ü–µ–ª—å
            target = random.choice(available_targets)
            logger.debug(f"üéØ –ü—Ä—è–º–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ: –≤—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å {target[1]} (ID: {target[0]})")
            return [target]
        
        elif outcome == 'miss':
            # –ü—Ä–æ–º–∞—Ö - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Å–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª
            initiator = next((p for p in participants if p[0] == initiator_id), None)
            if initiator:
                logger.debug(f"ü§° –ü—Ä–æ–º–∞—Ö: –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä {initiator[1]} (ID: {initiator[0]}) —Å–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª")
                return [initiator]
            else:
                logger.warning(f"‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä {initiator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                return available_targets[:1]
        
        elif outcome == 'splash':
            # –†–∞–∑–ª–µ—Ç–µ–ª–æ—Å—å - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–µ–ª–µ–π (2-4)
            num_targets = min(random.randint(2, 4), len(available_targets))
            targets = random.sample(available_targets, num_targets)
            target_names = [t[1] for t in targets]
            logger.debug(f"ü§Æ –†–∞–∑–ª–µ—Ç–µ–ª–æ—Å—å: –≤—ã–±—Ä–∞–Ω–æ {num_targets} —Ü–µ–ª–µ–π: {target_names}")
            return targets
        
        elif outcome == 'special':
            # –û—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            effect_type = random.choice(['boomerang', 'avalanche', 'brick', 'bomb', 'rain', 'lightning', 'fire', 'ice', 'rainbow', 'theater', 'circus', 'art', 'music', 'movie', 'game'])
            logger.debug(f"‚ö° –û—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç: {effect_type}")
            
            if effect_type == 'boomerang':
                # –ë—É–º–µ—Ä–∞–Ω–≥ - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Å–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª
                initiator = next((p for p in participants if p[0] == initiator_id), None)
                if initiator:
                    logger.debug(f"üîÑ –ë—É–º–µ—Ä–∞–Ω–≥: –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä {initiator[1]} (ID: {initiator[0]}) —Å–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª")
                    return [initiator]
                else:
                    return available_targets[:1]
            
            elif effect_type == 'avalanche':
                # –õ–∞–≤–∏–Ω–∞ - –≤–µ—Å—å —á–∞—Ç
                logger.debug(f"üå™Ô∏è –õ–∞–≤–∏–Ω–∞: –≤–µ—Å—å —á–∞—Ç ({len(available_targets)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) –æ–±–æ—Å—Ä–∞–Ω")
                return available_targets
            
            elif effect_type == 'brick':
                # –ö–∏—Ä–ø–∏—á - —Å–ª—É—á–∞–π–Ω–∞—è —Ü–µ–ª—å
                target = random.choice(available_targets)
                logger.debug(f"üß± –ö–∏—Ä–ø–∏—á: –≤—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å {target[1]} (ID: {target[0]})")
                return [target]
            
            elif effect_type == 'bomb':
                # –ì–æ–≤–Ω–æ–±–æ–º–±–∞ - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–µ–ª–µ–π
                num_targets = min(random.randint(3, 5), len(available_targets))
                targets = random.sample(available_targets, num_targets)
                target_names = [t[1] for t in targets]
                logger.debug(f"üí£ –ì–æ–≤–Ω–æ–±–æ–º–±–∞: –≤—ã–±—Ä–∞–Ω–æ {num_targets} —Ü–µ–ª–µ–π: {target_names}")
                return targets
            
            elif effect_type == 'rain':
                # –ì–æ–≤–Ω–æ–¥–æ–∂–¥—å - –≤–µ—Å—å —á–∞—Ç
                logger.debug(f"üåßÔ∏è –ì–æ–≤–Ω–æ–¥–æ–∂–¥—å: –≤–µ—Å—å —á–∞—Ç ({len(available_targets)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) –æ–±–æ—Å—Ä–∞–Ω")
                return available_targets
            
            elif effect_type in ['lightning', 'fire', 'ice', 'rainbow', 'theater', 'circus', 'art', 'music', 'movie', 'game']:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã - —Å–ª—É—á–∞–π–Ω–∞—è —Ü–µ–ª—å
                target = random.choice(available_targets)
                logger.debug(f"üé≠ –û—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç {effect_type}: –≤—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å {target[1]} (ID: {target[0]})")
                return [target]
        
        elif outcome == 'critical':
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ - –æ–¥–Ω–∞ —Ü–µ–ª—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —É—Ä–æ–Ω–æ–º
            target = random.choice(available_targets)
            logger.debug(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ: –≤—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å {target[1]} (ID: {target[0]})")
            return [target]
        
        elif outcome == 'combo':
            # –ö–æ–º–±–æ-—ç—Ñ—Ñ–µ–∫—Ç - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª–µ–π (3-5)
            num_targets = min(random.randint(3, 5), len(available_targets))
            targets = random.sample(available_targets, num_targets)
            target_names = [t[1] for t in targets]
            logger.debug(f"üîÑ –ö–æ–º–±–æ: –≤—ã–±—Ä–∞–Ω–æ {num_targets} —Ü–µ–ª–µ–π: {target_names}")
            return targets
        
        elif outcome == 'legendary':
            # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∏—Å—Ö–æ–¥ - –≤–µ—Å—å —á–∞—Ç
            logger.debug(f"üëë –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∏—Å—Ö–æ–¥: –≤–µ—Å—å —á–∞—Ç ({len(available_targets)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) –æ–±–æ—Å—Ä–∞–Ω")
            return available_targets
        
        logger.debug(f"üéØ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å")
        return available_targets[:1]
    
    def format_targets_text(self, targets: List[Tuple[int, str]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π –≤ —Ç–µ–∫—Å—Ç"""
        if not targets:
            logger.debug("üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π: —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            return "–Ω–∏–∫–æ–≥–æ"
        
        # –î–æ–±–∞–≤–ª—è–µ–º @ –∫ –∫–∞–∂–¥–æ–º—É –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        usernames = [f"@{target[1]}" if target[1] else f"@user{target[0]}" for target in targets]
        
        if len(usernames) == 1:
            result = usernames[0]
        elif len(usernames) == 2:
            result = f"{usernames[0]} –∏ {usernames[1]}"
        else:
            result = f"{', '.join(usernames[:-1])} –∏ {usernames[-1]}"
        
        logger.debug(f"üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π: {result}")
        return result
    
    def process_throw(self, initiator_id: int, initiator_username: str,
                     participants: List[Tuple[int, str]], chat_id: int) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –≥–æ–≤–Ω–∞"""
        try:
            logger.info(f"üí© –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞: {initiator_username} (ID: {initiator_id}) –≤ —á–∞—Ç–µ {chat_id}")
            logger.debug(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞: {len(participants)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            if self.check_cooldown(initiator_id):
                return {
                    'outcome': 'cooldown',
                    'message': f"‚è∞ {initiator_username}, –ø–æ–¥–æ–∂–¥–∏ –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±—Ä–æ—Å–∫–æ–º!",
                    'targets': [(initiator_id, initiator_username)],
                    'initiator_id': initiator_id,
                    'chat_id': chat_id,
                    'error': 'cooldown'
                }
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not self.get_user_role(initiator_id):
                role = self.assign_random_role(initiator_id)
                logger.info(f"üé≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {initiator_username} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å: {role}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ—Å–∫–∞
            self.record_throw(initiator_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥
            outcome = self.determine_outcome(initiator_id)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ü–µ–ª–∏
            targets = self.select_targets(participants, initiator_id, outcome)
            # –ú–∞–≥–Ω–∏—Ç: –ø–µ—Ä–≤—ã–π —É–¥–∞—Ä –ø–æ –Ω–æ–≤–æ–π —Ü–µ–ª–∏ +1 –∫ —Ñ–æ–∫—É—Å—É, –∞ –ø—Ä–∏ stacks>2 —à–∞–Ω—Å –ø—Ä—è–º–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤—ã—à–µ —É—á–ª–∏ –≤—ã—à–µ
            role_now = self.get_user_role(initiator_id)
            if role_now == 'magnet' and targets:
                t_id = targets[0][0]
                key = (initiator_id, t_id, chat_id)
                if self.focus_stacks.get(key, 0) == 0:
                    self.focus_stacks[key] = 1
                    logger.debug(f"üß≤ –ú–∞–≥–Ω–∏—Ç: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –¥–∞–ª 1 stack —Ñ–æ–∫—É—Å–∞ –Ω–∞ {t_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–º–±–æ –∏ —Å–µ—Ä–∏–π
            combo_count = self.update_combo_counter(initiator_id, outcome)
            streak_count = self.update_streak_counter(initiator_id, outcome)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º heat –∏ —Å—á—ë—Ç
            self.update_user_heat(initiator_id, 2)  # +2 heat –∑–∞ –±—Ä–æ—Å–æ–∫
            score_delta = 0
            if outcome == 'direct_hit':
                score_delta = 10
            elif outcome == 'miss':
                score_delta = -5
            self.update_user_score(initiator_id, score_delta)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            current_role = self.get_user_role(initiator_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if outcome == 'direct_hit':
                targets_text = self.format_targets_text(targets)
                message = self.get_random_message(outcome, 
                                               initiator=initiator_username,
                                               targets=targets_text)
            
            elif outcome == 'miss':
                message = self.get_random_message(outcome, initiator=initiator_username)
            
            elif outcome == 'splash':
                targets_text = self.format_targets_text(targets)
                message = self.get_random_message(outcome, 
                                               initiator=initiator_username,
                                               targets=targets_text)
            
            elif outcome == 'special':
                if len(targets) == 1 and targets[0][0] == initiator_id:
                    # –ë—É–º–µ—Ä–∞–Ω–≥ –∏–ª–∏ —Å–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª
                    message = self.get_random_message(outcome, initiator=initiator_username)
                else:
                    targets_text = self.format_targets_text(targets)
                    message = self.get_random_message(outcome, 
                                                   initiator=initiator_username,
                                                   targets=targets_text)
            
            elif outcome == 'critical':
                targets_text = self.format_targets_text(targets)
                message = self.get_random_message(outcome, 
                                               initiator=initiator_username,
                                               targets=targets_text)
            
            elif outcome == 'combo':
                targets_text = self.format_targets_text(targets)
                message = self.get_random_message(outcome, 
                                               initiator=initiator_username,
                                               targets=targets_text)
            
            elif outcome == 'legendary':
                targets_text = self.format_targets_text(targets)
                message = self.get_random_message(outcome, 
                                               initiator=initiator_username,
                                               targets=targets_text)
            
            result = {
                'outcome': outcome,
                'message': message,
                'targets': targets,
                'initiator_id': initiator_id,
                'chat_id': chat_id,
                'combo_count': combo_count,
                'streak_count': streak_count,
                'combo_bonus': self.get_combo_bonus(combo_count),
                'streak_bonus': self.get_streak_bonus(streak_count),
                # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏
                'role_used': current_role,
                'heat_at_throw': self.user_heat.get(initiator_id, 0),
                'focus_stacks': 0,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ bot.py
                'score_delta': score_delta,
                'public_signals': self.generate_public_signals(initiator_id, targets, chat_id, current_role, initiator_username)
            }
            
            logger.info(f"‚úÖ –ë—Ä–æ—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {outcome} -> {len(targets)} —Ü–µ–ª–µ–π")
            logger.debug(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ—Å–∫–∞: {e}")
            return {
                'outcome': 'miss',
                'message': f"{initiator_username} —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –æ–Ω –æ–±–æ—Å—Ä–∞–ª—Å—è —Å–∞–º üí©",
                'targets': [(initiator_id, initiator_username)],
                'initiator_id': initiator_id,
                'chat_id': chat_id
            }
    
    def process_throw_at_target(self, initiator_id: int, initiator_username: str,
                               target_id: int, target_username: str, chat_id: int) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –≥–æ–≤–Ω–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ü–µ–ª—å"""
        try:
            logger.info(f"üí© –¶–µ–ª–µ–≤–æ–π –±—Ä–æ—Å–æ–∫: {initiator_username} (ID: {initiator_id}) -> {target_username} (ID: {target_id}) –≤ —á–∞—Ç–µ {chat_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            if self.check_cooldown(initiator_id):
                return {
                    'outcome': 'cooldown',
                    'message': f"‚è∞ {initiator_username}, –ø–æ–¥–æ–∂–¥–∏ –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±—Ä–æ—Å–∫–æ–º!",
                    'targets': [(initiator_id, initiator_username)],
                    'initiator_id': initiator_id,
                    'chat_id': chat_id,
                    'error': 'cooldown'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å —Å–∞–º–∏–º –º–µ—Ç–∞—Ç–µ–ª–µ–º
            if target_id == initiator_id:
                return {
                    'outcome': 'self_target',
                    'message': f"ü§° {initiator_username}, –Ω–µ–ª—å–∑—è –º–µ—Ç–∞—Ç—å –≥–æ–≤–Ω–æ –≤ —Å–∞–º–æ–≥–æ —Å–µ–±—è!",
                    'targets': [(initiator_id, initiator_username)],
                    'initiator_id': initiator_id,
                    'chat_id': chat_id,
                    'error': 'self_target'
                }
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not self.get_user_role(initiator_id):
                role = self.assign_random_role(initiator_id)
                logger.info(f"üé≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {initiator_username} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å: {role}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ—Å–∫–∞
            self.record_throw(initiator_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–∫—É—Å –Ω–∞ —Ü–µ–ª—å
            self.update_focus_stacks(initiator_id, target_id, chat_id)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ —Ñ–æ–∫—É—Å
            focus_penalty = self.calculate_focus_penalty(initiator_id, target_id, chat_id)
            
            # –î–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –±—Ä–æ—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –ø—Ä—è–º–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–º–∞—Ö–∞
            outcomes = ['direct_hit', 'miss', 'splash', 'special']
            weights = [60, 15, 20, 5]  # –ë–∞–∑–æ–≤—ã–µ –≤–µ—Å–∞
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ —Ñ–æ–∫—É—Å
            if focus_penalty > 1.0:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –ø—Ä–æ–º–∞—Ö–∞ –∏ –æ—Å–æ–±—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                weights[1] = int(weights[1] * focus_penalty)  # miss
                weights[3] = int(weights[3] * focus_penalty)  # special
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
                total = sum(weights)
                weights = [int(w * 100 / total) for w in weights]
                logger.debug(f"üéØ –ü—Ä–∏–º–µ–Ω—ë–Ω —à—Ç—Ä–∞—Ñ –∑–∞ —Ñ–æ–∫—É—Å: {focus_penalty:.2f}x")
            
            # –†–æ–ª–µ–≤—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫ –∏—Å—Ö–æ–¥—É
            role_now = self.get_user_role(initiator_id)
            if role_now == 'saboteur':
                # –í–µ—à–∞–µ–º –Ω–∞ —Ü–µ–ª—å –¥–µ–±–∞—Ñ—Ñ –ø—Ä–æ–º–∞—Ö–∞ +30% –Ω–∞ –æ–¥–∏–Ω —Ö–æ–¥
                self.user_debuffs[target_id] = {
                    'miss_bonus': 0.3,
                    'expires_at': datetime.now() + timedelta(seconds=ROLE_DURATION/6)
                }
            if role_now == 'teleporter' and random.random() < 0.15:
                # –ü–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º —Ü–µ–ª—å –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ
                avail = [('dummy', 'dummy')]
                # —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑—É–µ–º –∫–∞–∫ special brick –ø–æ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
                outcomes = ['special']
                weights = [100]
            if role_now == 'trickster' and random.random() < 0.1:
                # 10% —à–∞–Ω—Å –±—É–º–µ—Ä–∞–Ω–≥–∞
                outcomes = ['special']
                weights = [100]
            outcome = random.choices(outcomes, weights=weights, k=1)[0]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–º–±–æ –∏ —Å–µ—Ä–∏–π
            combo_count = self.update_combo_counter(initiator_id, outcome)
            streak_count = self.update_streak_counter(initiator_id, outcome)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º heat –∏ —Å—á—ë—Ç
            self.update_user_heat(initiator_id, 3)  # +3 heat –∑–∞ —Ü–µ–ª–µ–≤–æ–π –±—Ä–æ—Å–æ–∫
            score_delta = 0
            if outcome == 'direct_hit':
                score_delta = 15
            elif outcome == 'miss':
                score_delta = -10
            self.update_user_score(initiator_id, score_delta)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            current_role = self.get_user_role(initiator_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ö–æ–¥–∞
            if outcome == 'direct_hit':
                targets = [(target_id, target_username)]
                targets_text = self.format_targets_text(targets)
                message = self.get_random_message(outcome, 
                                               initiator=initiator_username,
                                               targets=targets_text)
            
            elif outcome == 'miss':
                targets = [(initiator_id, initiator_username)]
                message = self.get_random_message(outcome, initiator=initiator_username)
            
            elif outcome == 'splash':
                # –†–∞–∑–ª–µ—Ç–µ–ª–æ—Å—å - —Ü–µ–ª—å + —Å–ª—É—á–∞–π–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
                targets = [(target_id, target_username)]
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
                targets_text = self.format_targets_text(targets)
                message = self.get_random_message(outcome, 
                                               initiator=initiator_username,
                                               targets=targets_text)
            
            elif outcome == 'special':
                # –û—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –±—Ä–æ—Å–∫–∞
                effect_type = random.choice(['boomerang', 'avalanche', 'brick', 'bomb'])
                logger.debug(f"‚ö° –û—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –±—Ä–æ—Å–∫–∞: {effect_type}")
                
                if effect_type == 'boomerang':
                    targets = [(initiator_id, initiator_username)]
                    message = self.get_random_message(outcome, initiator=initiator_username)
                elif effect_type == 'avalanche':
                    targets = [(target_id, target_username)]
                    targets_text = self.format_targets_text(targets)
                    message = self.get_random_message(outcome, 
                                                   initiator=initiator_username,
                                                   targets=targets_text)
                elif effect_type == 'brick':
                    targets = [(target_id, target_username)]
                    targets_text = self.format_targets_text(targets)
                    message = self.get_random_message(outcome, 
                                                   initiator=initiator_username,
                                                   targets=targets_text)
                elif effect_type == 'bomb':
                    targets = [(target_id, target_username)]
                    targets_text = self.format_targets_text(targets)
                    message = self.get_random_message(outcome, 
                                                   initiator=initiator_username,
                                                   targets=targets_text)
            
            result = {
                'outcome': outcome,
                'message': message,
                'targets': targets,
                'initiator_id': initiator_id,
                'chat_id': chat_id,
                'combo_count': combo_count,
                'streak_count': streak_count,
                'combo_bonus': self.get_combo_bonus(combo_count),
                'streak_bonus': self.get_streak_bonus(streak_count),
                # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏
                'role_used': current_role,
                'heat_at_throw': self.user_heat.get(initiator_id, 0),
                'focus_stacks': self.focus_stacks.get((initiator_id, target_id, chat_id), 0),
                'score_delta': score_delta,
                'public_signals': self.generate_public_signals(initiator_id, targets, chat_id, current_role, initiator_username)
            }
            
            logger.info(f"‚úÖ –¶–µ–ª–µ–≤–æ–π –±—Ä–æ—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {outcome} -> {target_username}")
            logger.debug(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –±—Ä–æ—Å–∫–∞: {e}")
            return {
                'outcome': 'miss',
                'message': f"{initiator_username} —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –æ–Ω –æ–±–æ—Å—Ä–∞–ª—Å—è —Å–∞–º üí©",
                'targets': [(initiator_id, initiator_username)],
                'initiator_id': initiator_id,
                'chat_id': chat_id
            }
    
    # ---------------------- –ü—É–±–ª–∏—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã ----------------------
    def generate_public_signals(self, initiator_id: int, targets: List[Tuple[int, str]], 
                               chat_id: int, role: Optional[str], initiator_username: Optional[str] = None) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ—Å–ª–µ –±—Ä–æ—Å–∫–∞"""
        signals = {
            'initiator_role': role,
            'heat_status': self.user_heat.get(initiator_id, 0),
            'under_fire_candidates': [],
            'call_to_action': '',
            'focus_warning': False,
            'initiator_username': initiator_username or '',
            'callouts': []
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ "–ø–æ–¥ –ø—Ä–∏—Ü–µ–ª–æ–º"
        if targets and len(targets) == 1:
            target_id = targets[0][0]
            if target_id != initiator_id:
                # –¶–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å
                signals['under_fire_candidates'].append({
                    'user_id': target_id,
                    'username': targets[0][1],
                    'can_retaliate': True,
                    'focus_stacks': self.focus_stacks.get((initiator_id, target_id, chat_id), 0)
                })
                
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ñ–æ–∫—É—Å–µ
                if signals['under_fire_candidates'][0]['focus_stacks'] > 2:
                    signals['focus_warning'] = True
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        if signals['under_fire_candidates']:
            target = signals['under_fire_candidates'][0]
            if target['can_retaliate']:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
                reply_to = signals.get('initiator_username') or 'initiator'
                stacks = target['focus_stacks']
                # –ü—É–ª –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –∏—Ä–æ–Ω–∏—á–Ω—ã—Ö —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –æ—Ç–≤–µ—Ç–∫–∏ –º–µ—Ç–∞—Ç–µ–ª—é
                retaliate_pool = [
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –∞ –Ω—É –ø–æ–∫–∞–∂–∏ —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å, —Ç—Ä—É—Å!",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –≤–µ—Ä–Ω–∏ –≥–æ–≤–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ, –µ—Å–ª–∏ –Ω–µ –±–æ–∏—à—å—Å—è!",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} —Ç—ã —ç—Ç–æ –≤–∏–¥–µ–ª? –¥–æ–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –Ω–µ —Ç—Ä—è–ø–∫–∞!",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –º–µ—Å—Ç—å –ø–æ–¥–∞–Ω–∞ —Ö–æ–ª–æ–¥–Ω–æ–π, –Ω–æ —Ç—ã –∂–µ –Ω–µ –∑–∞–º–µ—Ä–∑–Ω–µ—à—å?",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –ø–æ—Ä–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ —Ç—É—Ç –≥–ª–∞–≤–Ω—ã–π, –∞ –Ω–µ –ø—Ä—è—Ç–∞—Ç—å—Å—è!",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –Ω–µ –¥–µ—Ä–∂–∏ –≤ —Å–µ–±–µ, –≤—ã–ø–ª–µ—Å–Ω–∏ –≤—Å—é –∑–ª–æ—Å—Ç—å!",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –ø—Ä–æ–≤–µ–¥–∏ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É, –µ—Å–ª–∏ —Ö–≤–∞—Ç–∏—Ç —Å–º–µ–ª–æ—Å—Ç–∏!",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å —Å–∏—è—Ç—å, –∏–ª–∏ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –º–æ–ª—á–∞—Ç—å?",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –¥–∂–µ–Ω—Ç–ª—å–º–µ–Ω—ã –Ω–µ –ø—Ä–æ–º–∞—Ö–∏–≤–∞—é—Ç—Å—è, –∞ —Ç—ã –∫—Ç–æ?",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –≤–æ–∑—å–º–∏ –ø–µ—Ä—á–∞—Ç–∫—É‚Ä¶ –∏ –∫–∏–Ω—å –æ–±—Ä–∞—Ç–Ω–æ, –µ—Å–ª–∏ –Ω–µ —Å—Ç—Ä—É—Å–∏—à—å!",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –ø–æ–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–æ–ª—Ç—É–Ω!",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –¥–æ–∫–∞–∂–∏ —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —è–π—Ü–∞!",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –Ω–µ –±—É–¥—å —Ç—Ä—è–ø–∫–æ–π, –æ—Ç–≤–µ—Ç—å –∫–∞–∫ –º—É–∂—á–∏–Ω–∞!",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} —Ç—ã –∂–µ –Ω–µ –±—É–¥–µ—à—å —Ç–µ—Ä–ø–µ—Ç—å —Ç–∞–∫–æ–µ —É–Ω–∏–∂–µ–Ω–∏–µ?",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –ø–æ–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ–∑–≤–æ–Ω!",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –¥–æ–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –Ω–µ —Ç—Ä—É—Å –∏ –Ω–µ –ø–æ–¥–∫–∞–±–ª—É—á–Ω–∏–∫!",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –Ω–µ –ø—Ä—è—á—å—Å—è –∑–∞ —Å–ø–∏–Ω–∞–º–∏, –æ—Ç–≤–µ—Ç—å!",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} —Ç—ã –∂–µ –Ω–µ –±—É–¥–µ—à—å –º–æ–ª—á–∞—Ç—å –∫–∞–∫ —Ä—ã–±–∞?",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –ø–æ–∫–∞–∂–∏ —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä!",
                    f"–º–µ—Ç–∞–π –≤ /go@{reply_to} –¥–æ–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–æ–ª—Ç—É–Ω –∏ —Ö–≤–∞—Å—Ç—É–Ω!",
                ]
                
                # –ü—É–ª –≤—Å—Ä–∞—Ç—ã—Ö —Ñ—Ä–∞–∑ –≤–º–µ—Å—Ç–æ "–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å!"
                response_phrases = [
                    "–≥–æ—Ç–æ–≤ –∫ –æ—Ç–≤–µ—Ç–∫–µ?",
                    "–º–æ–∂–µ—Ç –¥–∞—Ç—å —Å–¥–∞—á–∏?",
                    "–≥–æ—Ç–æ–≤ –∫ —Ä–µ–≤–∞–Ω—à—É?",
                    "–º–æ–∂–µ—Ç –æ—Ç–æ–º—Å—Ç–∏—Ç—å?",
                    "–≥–æ—Ç–æ–≤ –∫ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–µ?",
                    "–º–æ–∂–µ—Ç –¥–∞—Ç—å –ø–æ —Ä–æ–≥–∞–º?",
                    "–≥–æ—Ç–æ–≤ –∫ –¥—É—ç–ª–∏?",
                    "–º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –∫—É–∑—å–∫–∏–Ω—É –º–∞—Ç—å?",
                    "–≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–±–æ—Ä–∫–∞–º?",
                    "–º–æ–∂–µ—Ç –¥–∞—Ç—å –ø–æ —à–∞–ø–∫–µ?",
                    "–≥–æ—Ç–æ–≤ –∫ –≤—ã—è—Å–Ω–µ–Ω–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏–π?",
                    "–º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ —Ç—É—Ç –≥–ª–∞–≤–Ω—ã–π?",
                    "–≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–±–æ—Ä—É –ø–æ–ª–µ—Ç–æ–≤?",
                    "–º–æ–∂–µ—Ç –¥–∞—Ç—å –ø–æ –º–æ–∑–≥–∞–º?",
                    "–≥–æ—Ç–æ–≤ –∫ –≤—ã—è—Å–Ω–µ–Ω–∏—é –∫—Ç–æ –ø—Ä–∞–≤?",
                    "–º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å?",
                    "–≥–æ—Ç–æ–≤ –∫ —É—Ä–æ–∫—É –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏?",
                    "–º–æ–∂–µ—Ç –¥–∞—Ç—å –ø–æ –∑—É–±–∞–º?",
                    "–≥–æ—Ç–æ–≤ –∫ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É?",
                    "–º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ –Ω–∞–¥–æ?",
                ]
                # –§—Ä–∞–∑—ã –ø—Ä–æ —Ñ–æ–∫—É—Å
                if stacks > 2:
                    signals['focus_warning'] = True
                    signals['callouts'].append(
                        f"@{target['username']} –ø–æ–¥ –ø—Ä–∏—Ü–µ–ª–æ–º! –§–æ–∫—É—Å: {stacks}"
                    )
                # Heat callouts (–ø–æ—Ä–æ–≥ 20)
                heat = signals['heat_status']
                if isinstance(heat, int) and heat >= 20:
                    heat_pool = [
                        f"–ê–≥—Ä–µ—Å—Å–æ—Ä –ø–µ—Ä–µ–≥—Ä–µ–ª—Å—è ({heat}/100). –û—Å—Ç—É–¥–∏ –µ–≥–æ: /go@{reply_to}",
                        f"–í–æ–Ω—è–µ—Ç –æ—Ç —Å–º–µ–ª–æ—Å—Ç–∏ ({heat}/100). –ü–æ—Ä–∞ —É–º—ã—Ç—å: /go@{reply_to}",
                    ]
                    signals['callouts'].append(random.choice(heat_pool))
                # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–∑—ã–≤ ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –æ—Ç–≤–µ—Ç–∫–∞
                retaliate_phrase = random.choice(retaliate_pool)
                response_phrase = random.choice(response_phrases)
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫—Ç–æ –Ω–∞ –∫–æ–≥–æ –Ω–∞–ø–∞–¥–∞–ª
                signals['callouts'].append(f"üí• @{signals.get('initiator_username', 'initiator')} –∞—Ç–∞–∫–æ–≤–∞–ª @{target['username']}")
                signals['call_to_action'] = f"üéØ @{target['username']} {response_phrase} {retaliate_phrase}"
        
        return signals
    
    def get_emoji_for_outcome(self, outcome: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∏—Å—Ö–æ–¥–∞"""
        emojis = {
            'direct_hit': 'üéØüí©',
            'miss': 'ü§°üí©',
            'splash': 'ü§Æüí©',
            'special': '‚ö°üí©',
            'critical': 'üí•üí©',
            'combo': 'üîÑüí©',
            'legendary': 'üëëüí©',
            'cooldown': '‚è∞',
            'self_target': 'ü§°'
        }
        emoji = emojis.get(outcome, 'üí©')
        logger.debug(f"üòÄ –≠–º–æ–¥–∑–∏ –¥–ª—è –∏—Å—Ö–æ–¥–∞ {outcome}: {emoji}")
        return emoji
    
    def update_combo_counter(self, user_id: int, outcome: str) -> int:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–º–±–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.combo_counters:
            self.combo_counters[user_id] = 0
        
        if outcome in ['direct_hit', 'critical', 'combo']:
            self.combo_counters[user_id] += 1
            logger.debug(f"üîÑ –ö–æ–º–±–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.combo_counters[user_id]}")
        else:
            self.combo_counters[user_id] = 0
            logger.debug(f"üîÑ –°–±—Ä–æ—Å –∫–æ–º–±–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return self.combo_counters[user_id]
    
    def update_streak_counter(self, user_id: int, outcome: str) -> int:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–µ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.streak_counters:
            self.streak_counters[user_id] = 0
        
        if outcome in ['direct_hit', 'critical', 'combo', 'legendary']:
            self.streak_counters[user_id] += 1
            logger.debug(f"üî• –°–µ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.streak_counters[user_id]}")
        else:
            self.streak_counters[user_id] = 0
            logger.debug(f"üî• –°–±—Ä–æ—Å —Å–µ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return self.streak_counters[user_id]
    
    def get_combo_bonus(self, combo_count: int) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –∑–∞ –∫–æ–º–±–æ"""
        if combo_count >= 10:
            return 3.0  # –¢—Ä–æ–π–Ω–æ–π —É—Ä–æ–Ω
        elif combo_count >= 5:
            return 2.0  # –î–≤–æ–π–Ω–æ–π —É—Ä–æ–Ω
        elif combo_count >= 3:
            return 1.5  # –ü–æ–ª—É—Ç–æ—Ä–Ω—ã–π —É—Ä–æ–Ω
        else:
            return 1.0  # –û–±—ã—á–Ω—ã–π —É—Ä–æ–Ω
    
    def get_streak_bonus(self, streak_count: int) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –∑–∞ —Å–µ—Ä–∏—é"""
        if streak_count >= 20:
            return 4.0  # –ß–µ—Ç–≤–µ—Ä–Ω–æ–π —É—Ä–æ–Ω
        elif streak_count >= 15:
            return 3.0  # –¢—Ä–æ–π–Ω–æ–π —É—Ä–æ–Ω
        elif streak_count >= 10:
            return 2.5  # –î–≤–æ–π–Ω–æ–π —Å –ø–æ–ª–æ–≤–∏–Ω–æ–π —É—Ä–æ–Ω
        elif streak_count >= 5:
            return 2.0  # –î–≤–æ–π–Ω–æ–π —É—Ä–æ–Ω
        else:
            return 1.0  # –û–±—ã—á–Ω—ã–π —É—Ä–æ–Ω
