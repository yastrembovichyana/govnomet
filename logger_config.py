#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ì–æ–≤–Ω–æ–ú—ë—Ç
"""

import logging
import logging.handlers
import os
from pathlib import Path
from datetime import datetime

class GovnometLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä—ã –ì–æ–≤–Ω–æ–ú—ë—Ç"""
    
    def __init__(self, log_dir: str = "logs", max_size_mb: int = 2):
        self.log_dir = Path(log_dir)
        self.max_size_bytes = max_size_mb * 1024 * 1024  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
        self.setup_logging()
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.log_dir.mkdir(exist_ok=True)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger('govnomet')
        self.logger.setLevel(logging.INFO)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.logger.handlers.clear()
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
        formatter = logging.Formatter(
            fmt='%(asctime)s | %(levelname)-8s | %(name)-15s | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        file_handler = logging.handlers.RotatingFileHandler(
            filename=self.log_dir / "govnomet.log",
            maxBytes=self.max_size_bytes,
            backupCount=5,  # –•—Ä–∞–Ω–∏–º 5 —Ñ–∞–π–ª–æ–≤ –±—ç–∫–∞–ø–∞
            encoding='utf-8'
        )
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫
        error_handler = logging.handlers.RotatingFileHandler(
            filename=self.log_dir / "govnomet_errors.log",
            maxBytes=self.max_size_bytes,
            backupCount=3,  # –•—Ä–∞–Ω–∏–º 3 —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞ –¥–ª—è –æ—à–∏–±–æ–∫
            encoding='utf-8'
        )
        error_handler.setLevel(logging.ERROR)
        error_handler.setFormatter(formatter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ª–æ–≥–≥–µ—Ä—É
        self.logger.addHandler(console_handler)
        self.logger.addHandler(file_handler)
        self.logger.addHandler(error_handler)
        
        # –õ–æ–≥–≥–µ—Ä –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db_logger = logging.getLogger('govnomet.database')
        self.db_logger.setLevel(logging.INFO)
        
        # –õ–æ–≥–≥–µ—Ä –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
        self.game_logger = logging.getLogger('govnomet.game')
        self.game_logger.setLevel(logging.INFO)
        
        # –õ–æ–≥–≥–µ—Ä –¥–ª—è –±–æ—Ç–∞
        self.bot_logger = logging.getLogger('govnomet.bot')
        self.bot_logger.setLevel(logging.INFO)
        
        # –õ–æ–≥–≥–µ—Ä –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        self.scheduler_logger = logging.getLogger('govnomet.scheduler')
        self.scheduler_logger.setLevel(logging.INFO)
    
    def get_logger(self, name: str = None) -> logging.Logger:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏"""
        if name:
            return logging.getLogger(f'govnomet.{name}')
        return self.logger
    
    def log_startup(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.logger.info("üöÄ –ì–æ–≤–Ω–æ–ú—ë—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        self.logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: {self.log_dir.absolute()}")
        self.logger.info(f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞: {self.max_size_bytes // (1024*1024)} –ú–ë")
        self.logger.info(f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –±—ç–∫–∞–ø–∞: 5")
        self.logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    def log_shutdown(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.logger.info("üëã –ì–æ–≤–Ω–æ–ú—ë—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
        self.logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    def error(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        self.logger.error(message)
    
    def info(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        self.logger.info(message)
    
    def warning(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        self.logger.warning(message)
    
    def debug(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        self.logger.debug(message)
    
    def cleanup_old_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        try:
            log_files = list(self.log_dir.glob("*.log*"))
            total_size = sum(f.stat().st_size for f in log_files)
            total_size_mb = total_size / (1024 * 1024)
            
            self.logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤: –Ω–∞–π–¥–µ–Ω–æ {len(log_files)} —Ñ–∞–π–ª–æ–≤")
            self.logger.info(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤: {total_size_mb:.2f} –ú–ë")
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
            import time
            current_time = time.time()
            thirty_days_ago = current_time - (30 * 24 * 60 * 60)
            
            deleted_count = 0
            for log_file in log_files:
                if log_file.stat().st_mtime < thirty_days_ago:
                    log_file.unlink()
                    deleted_count += 1
            
            if deleted_count > 0:
                self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
govnomet_logger = GovnometLogger()

def get_logger(name: str = None) -> logging.Logger:
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞"""
    return govnomet_logger.get_logger(name)

def setup_logging(log_dir: str = "logs", max_size_mb: int = 2):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global govnomet_logger
    govnomet_logger = GovnometLogger(log_dir, max_size_mb)
    return govnomet_logger

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging("test_logs", 1)  # 1 –ú–ë –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.log_startup()
    
    test_logger = get_logger("test")
    test_logger.info("‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    test_logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
    test_logger.error("‚ùå –¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
    test_logger.debug("üîç –¢–µ—Å—Ç–æ–≤–æ–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
    db_logger = get_logger("database")
    db_logger.info("üóÑÔ∏è –¢–µ—Å—Ç –ª–æ–≥–≥–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    game_logger = get_logger("game")
    game_logger.info("üéÆ –¢–µ—Å—Ç –ª–æ–≥–≥–µ—Ä–∞ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏")
    
    logger.log_shutdown()
    
    print("‚úÖ –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É test_logs/")
