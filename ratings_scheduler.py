#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤ –∏–≥—Ä–µ –ì–æ–≤–Ω–æ–ú—ë—Ç
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List
from database import Database
from config import GAME_SETTINGS
from logger_config import get_logger

logger = get_logger('scheduler')

class RatingsScheduler:
    def __init__(self, database: Database):
        self.db = database
        self.active_chats = set()
        self.is_running = False
        logger.info("üìä –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ì–æ–≤–Ω–æ–ú—ë—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
        
        try:
            while self.is_running:
                await self.update_all_ratings()
                await asyncio.sleep(GAME_SETTINGS['ratings_update_interval'])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {e}")
        finally:
            self.is_running = False
    
    async def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = False
        logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def update_all_ratings(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
            active_chats = await self.get_active_chats()
            
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è {len(active_chats)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")
            
            for chat_id in active_chats:
                await self.update_chat_ratings(chat_id)
            
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è {len(active_chats)} —á–∞—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {e}")
    
    async def get_active_chats(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Telegram API
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            test_chats = [1, 2, 3]  # –¢–µ—Å—Ç–æ–≤—ã–µ ID —á–∞—Ç–æ–≤
            logger.debug(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(test_chats)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")
            return test_chats
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
            return []
    
    async def update_chat_ratings(self, chat_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        try:
            logger.debug(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
            weekly_ratings = await self.db.get_ratings(chat_id, days=7)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –∑–∞ –¥–µ–Ω—å
            daily_ratings = await self.db.get_ratings(chat_id, days=1)
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤ —á–∞—Ç
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ø-3 —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            
            logger.info(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            logger.debug(f"üìà –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏: {weekly_ratings}")
            logger.debug(f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏: {daily_ratings}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
    
    async def get_formatted_ratings(self, chat_id: int, days: int = 7) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç"""
        try:
            ratings = await self.db.get_ratings(chat_id, days)
            
            if days == 1:
                period = "–¥–Ω—è"
            elif days == 7:
                period = "–Ω–µ–¥–µ–ª–∏"
            else:
                period = f"{days} –¥–Ω–µ–π"
            
            text = f"üèÜ <b>–†–µ–π—Ç–∏–Ω–≥–∏ –∑–∞ {period}:</b>\n\n"
            
            if ratings.get('king'):
                username, hits = ratings['king']
                text += f"üëë <b>–ö–æ—Ä–æ–ª—å –≥–æ–≤–Ω–∞:</b> @{username} ({hits} –ø–æ–ø–∞–¥–∞–Ω–∏–π)\n"
            
            if ratings.get('victim'):
                username, hit_count = ratings['victim']
                text += f"üòµ <b>–ì–ª–∞–≤–Ω—ã–π –æ–±–æ—Å—Ä–∞–Ω–Ω—ã–π:</b> @{username} ({hit_count} —Ä–∞–∑)\n"
            
            if ratings.get('idiot'):
                username, self_hits = ratings['idiot']
                text += f"ü§° <b>–î–æ–ª–±–æ—ë–± {period}:</b> @{username} ({self_hits} —Ä–∞–∑)\n"
            
            if not any(ratings.values()):
                text += "üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤. –ò–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ!"
            
            logger.debug(f"üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id} –∑–∞ {period}")
            return text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"
    
    async def add_chat_to_scheduler(self, chat_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        self.active_chats.add(chat_id)
        logger.info(f"‚ûï –ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
    
    async def remove_chat_from_scheduler(self, chat_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        self.active_chats.discard(chat_id)
        logger.info(f"‚ûñ –ß–∞—Ç {chat_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
    
    async def get_scheduler_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        status = {
            'is_running': self.is_running,
            'active_chats_count': len(self.active_chats),
            'active_chats': list(self.active_chats),
            'last_update': datetime.now().isoformat()
        }
        logger.debug(f"üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {status}")
        return status

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
    
    db = Database()
    scheduler = RatingsScheduler(db)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —á–∞—Ç—ã
    await scheduler.add_chat_to_scheduler(1)
    await scheduler.add_chat_to_scheduler(2)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    status = await scheduler.get_scheduler_status()
    logger.info(f"üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {status}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    await scheduler.start_scheduler()

if __name__ == "__main__":
    asyncio.run(main())
