import asyncio
import random
import logging
from datetime import datetime, timedelta, timezone
from typing import List, Tuple

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import BOT_TOKEN, GAME_SETTINGS, LOGGING_SETTINGS
from database import Database
from game_logic import GameLogic
from logger_config import setup_logging, get_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging(
    log_dir=LOGGING_SETTINGS['log_directory'],
    max_size_mb=LOGGING_SETTINGS['max_log_size_mb']
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
game_logic = GameLogic()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /go (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!)
@dp.message(Command("go"))
async def cmd_go(message: types.Message):
    """–ú–µ—Ç–Ω—É—Ç—å –≥–æ–≤–Ω–æ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    schedule_auto_delete(message, 10)
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"üí© –ö–æ–º–∞–Ω–¥–∞ /go –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∞
    _record_seen_user(chat_id, user)

    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ü–µ–ª–∏–º—Å—è –≤ –∞–≤—Ç–æ—Ä–∞ —Ä–µ–ø–ª–∞—è
    if (not message.text or len(message.text.split()) < 2) and getattr(message, "reply_to_message", None):
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        await db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )

        participants = await get_chat_participants(chat_id)
        reply_user = message.reply_to_message.from_user
        target_id = reply_user.id
        target_username = reply_user.username or f"user{reply_user.id}"

        # –ï—Å–ª–∏ —Ü–µ–ª–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –≤—Å—ë —Ä–∞–≤–Ω–æ –±—å—ë–º –ø–æ —Ä–µ–ø–ª–∞—é
        game_result = game_logic.process_throw_at_target(
            initiator_id=user.id,
            initiator_username=user.username or f"user{user.id}",
            target_id=target_id,
            target_username=target_username,
            chat_id=chat_id
        )

        # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(game_result, dict) and game_result.get('error') == 'cooldown':
            cooldown_msg = await message.answer(
                f"‚è∞ {game_result['message']}",
                reply_markup=get_throw_button()
            )
            schedule_auto_delete(cooldown_msg, 5)
            try:
                hint_msg = await message.answer("‚è∞ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ‚Ä¶")
                schedule_auto_delete(hint_msg, 5)
            except Exception:
                pass
            return

        for target in game_result['targets']:
            await db.add_event(
                initiator_id=user.id,
                target_id=target[0],
                outcome=game_result['outcome'],
                chat_id=chat_id
            )
        await db.update_user_stats(user.id, game_result['outcome'], is_target=False)
        for target in game_result['targets']:
            await db.update_user_stats(target[0], game_result['outcome'], is_target=True)
        emoji = game_logic.get_emoji_for_outcome(game_result['outcome'])
        result_message = f"{emoji} {game_result['message']}"
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if game_result.get('role_used'):
            role_names = {
                'sniper': 'üéØ –°–Ω–∞–π–ø–µ—Ä',
                'bombardier': 'üí£ –ë–æ–º–±–∞—Ä–¥–∏—Ä',
                'defender': 'üõ°Ô∏è –û–±–æ—Ä–æ–Ω–µ—Ü',
                'drunk_sniper': 'üç∫üéØ –°–Ω–∞–π–ø–µ—Ä‚Äë–ø—å—è–Ω–∏—Ü–∞',
                'berserker': 'ü™ì –ë–µ—Ä—Å–µ—Ä–∫',
                'trickster': 'üÉè –¢—Ä–∏–∫—Å—Ç–µ—Ä',
                'magnet': 'üß≤ –ú–∞–≥–Ω–∏—Ç',
                'saboteur': 'üï≥Ô∏è –°–∞–±–æ—Ç–∞–∂–Ω–∏–∫',
                'oracle': 'üîÆ –û—Ä–∞–∫—É–ª',
                'pyromaniac': 'üî• –ü–∏—Ä–æ–º–∞–Ω',
                'shieldbearer': 'üõ°Ô∏è –©–∏—Ç–æ–Ω–æ—Å–µ—Ü',
                'collector': 'üìé –ö–æ–ª–ª–µ–∫—Ç–æ—Ä',
                'teleporter': 'üåÄ –¢–µ–ª–µ–ø–æ—Ä—Ç–µ—Ä',
                'rocketeer': 'üöÄ –ì–æ–≤–Ω–æ—Ä–∞–∫–µ—Ç—á–∏–∫',
                'snot_sniper': 'ü§ß –°–æ–ø–ª—è‚Äë—Å–Ω–∞–π–ø–µ—Ä',
                'acid_clown': 'üß™ü§° –ö–∏—Å–ª–æ—Ç–Ω—ã–π –∫–ª–æ—É–Ω',
                'counter_guru': 'üîÅ –û–±—Ä–∞—Ç–∫–∞‚Äë–≥—É—Ä—É'
            }
            role_name = role_names.get(game_result['role_used'], 'üé≠ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å')
            result_message += f"\n\nüé≠ –†–æ–ª—å –º–µ—Ç–∞—Ç–µ–ª—è: {role_name}"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if game_result.get('public_signals'):
            extras = _format_public_signals(game_result['public_signals'])
            if extras:
                result_message += "\n\n" + "\n".join([f"üì¢ {line}" for line in extras])

        await message.answer(result_message, reply_markup=get_throw_button_with_role(game_result.get('role_used')))
        return

    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –º–µ—Ç–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ (–∫–∞–∫ –∫–Ω–æ–ø–∫–æ–π)
    if not message.text or len(message.text.split()) < 2:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        await db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        participants = await get_chat_participants(chat_id)
        if not participants:
            # –§–æ–ª–ª–±—ç–∫: –±–µ—Ä—ë–º —Ö–æ—Ç—è –±—ã –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –±—Ä–æ—Å–æ–∫ –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–±–æ—Ç–∞–ª
            initiator_name = user.username or f"user{user.id}"
            participants = [(user.id, initiator_name)]
            logger.info("üß© –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–ª—å –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞")

        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ü–µ–ª—å (–Ω–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞). –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ, –æ—Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â—É—é –º–µ—Ö–∞–Ω–∏–∫—É
        available_targets = [p for p in participants if p[0] != user.id]
        if available_targets:
            random_target_id, random_target_username = random.choice(available_targets)
            logger.info(f"üéØ /go –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç @{random_target_username} ({random_target_id})")
            game_result = game_logic.process_throw_at_target(
                initiator_id=user.id,
                initiator_username=user.username or f"user{user.id}",
                target_id=random_target_id,
                target_username=random_target_username,
                chat_id=chat_id
            )
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±—Ä–æ—Å–æ–∫ –ø–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ (–∫–æ–≥–¥–∞ –æ–¥–∏–Ω –≤ —á–∞—Ç–µ)
            game_result = game_logic.process_throw(
                initiator_id=user.id,
                initiator_username=user.username or f"user{user.id}",
                participants=participants,
                chat_id=chat_id
            )
        
        # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(game_result, dict) and game_result.get('error') == 'cooldown':
            cooldown_msg = await message.answer(
                f"‚è∞ {game_result['message']}",
                reply_markup=get_throw_button()
            )
            schedule_auto_delete(cooldown_msg, 5)
            try:
                hint_msg = await message.answer("‚è∞ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ‚Ä¶")
                schedule_auto_delete(hint_msg, 5)
            except Exception:
                pass
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ(—è)
        for target in game_result['targets']:
            await db.add_event(
                initiator_id=user.id,
                target_id=target[0],
                outcome=game_result['outcome'],
                chat_id=chat_id
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await db.update_user_stats(user.id, game_result['outcome'], is_target=False)
        for target in game_result['targets']:
            await db.update_user_stats(target[0], game_result['outcome'], is_target=True)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        emoji = game_logic.get_emoji_for_outcome(game_result['outcome'])
        result_message = f"{emoji} {game_result['message']}"
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if game_result.get('role_used'):
            role_names = {
                'sniper': 'üéØ –°–Ω–∞–π–ø–µ—Ä',
                'bombardier': 'üí£ –ë–æ–º–±–∞—Ä–¥–∏—Ä',
                'defender': 'üõ°Ô∏è –û–±–æ—Ä–æ–Ω–µ—Ü',
                'drunk_sniper': 'üç∫üéØ –°–Ω–∞–π–ø–µ—Ä‚Äë–ø—å—è–Ω–∏—Ü–∞',
                'berserker': 'ü™ì –ë–µ—Ä—Å–µ—Ä–∫',
                'trickster': 'üÉè –¢—Ä–∏–∫—Å—Ç–µ—Ä',
                'magnet': 'üß≤ –ú–∞–≥–Ω–∏—Ç',
                'saboteur': 'üï≥Ô∏è –°–∞–±–æ—Ç–∞–∂–Ω–∏–∫',
                'oracle': 'üîÆ –û—Ä–∞–∫—É–ª',
                'pyromaniac': 'üî• –ü–∏—Ä–æ–º–∞–Ω',
                'shieldbearer': 'üõ°Ô∏è –©–∏—Ç–æ–Ω–æ—Å–µ—Ü',
                'collector': 'üìé –ö–æ–ª–ª–µ–∫—Ç–æ—Ä',
                'teleporter': 'üåÄ –¢–µ–ª–µ–ø–æ—Ä—Ç–µ—Ä',
                'rocketeer': 'üöÄ –ì–æ–≤–Ω–æ—Ä–∞–∫–µ—Ç—á–∏–∫',
                'snot_sniper': 'ü§ß –°–æ–ø–ª—è‚Äë—Å–Ω–∞–π–ø–µ—Ä',
                'acid_clown': 'üß™ü§° –ö–∏—Å–ª–æ—Ç–Ω—ã–π –∫–ª–æ—É–Ω',
                'counter_guru': 'üîÅ –û–±—Ä–∞—Ç–∫–∞‚Äë–≥—É—Ä—É'
            }
            role_name = role_names.get(game_result['role_used'], 'üé≠ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å')
            result_message += f"\n\nüé≠ –†–æ–ª—å –º–µ—Ç–∞—Ç–µ–ª—è: {role_name}"

        # –ü—É–±–ª–∏—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏)
        if game_result.get('public_signals'):
            extras = _format_public_signals(game_result['public_signals'])
            if extras:
                result_message += "\n\n" + "\n".join([f"üì¢ {line}" for line in extras])
        await message.answer(
            result_message,
            reply_markup=get_throw_button_with_role(game_result.get('role_used'))
        )
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–ª—å –∏–∑ entities/—Ç–µ–∫—Å—Ç–∞
    target_username = None
    # 1) entities: mention (@name) –∏–ª–∏ text_mention (–ø—Ä—è–º–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    try:
        if message.entities:
            for ent in message.entities:
                if ent.type in {"mention", "text_mention"}:
                    if ent.type == "mention":
                        target_username = message.text[ent.offset: ent.offset + ent.length]
                        target_username = target_username.lstrip('@')
                        break
                    elif ent.type == "text_mention" and ent.user:
                        target_username = str(ent.user.id)
                        break
    except Exception:
        pass
    # 2) –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–º —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞: /go@user
    if not target_username and message.text and message.text.startswith('/go@'):
        after = message.text[len('/go@'):]
        target_username = after.split()[0].strip(',.;:!?)(')
    # 3) –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –±–µ—Ä—ë–º –≤—Ç–æ—Ä–æ–π —Ç–æ–∫–µ–Ω
    if not target_username:
        parts = message.text.split(maxsplit=1)
        if len(parts) > 1:
            target_username = parts[1].strip()
    # –ß–∏—Å—Ç–∏–º –æ—Ç –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –ø–æ –∫—Ä–∞—è–º –∏ @
    if target_username:
        target_username = target_username.strip().strip(',.;:!?)(').lstrip('@')
    else:
        # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ‚Äî fallback –≤ —Å–ª—É—á–∞–π–Ω—ã–π –±—Ä–æ—Å–æ–∫
        await message.answer("ü§∑ –ù–µ –ø–æ–Ω—è–ª, –≤ –∫–æ–≥–æ –º–µ—Ç–∞—Ç—å. –ö–∏–¥–∞—é –Ω–∞—É–≥–∞–¥.")
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
        await db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        participants = await get_chat_participants(chat_id)
        if not participants:
            initiator_name = user.username or f"user{user.id}"
            participants = [(user.id, initiator_name)]
        available_targets = [p for p in participants if p[0] != user.id]
        if available_targets:
            random_target_id, random_target_username = random.choice(available_targets)
            game_result = game_logic.process_throw_at_target(
                initiator_id=user.id,
                initiator_username=user.username or f"user{user.id}",
                target_id=random_target_id,
                target_username=random_target_username,
                chat_id=chat_id
            )
        else:
            game_result = game_logic.process_throw(
                initiator_id=user.id,
                initiator_username=user.username or f"user{user.id}",
                participants=participants,
                chat_id=chat_id
            )
        if isinstance(game_result, dict) and game_result.get('error') == 'cooldown':
            await message.answer(f"‚è∞ {game_result['message']}", reply_markup=get_throw_button())
            try:
                await message.answer("‚è∞ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ‚Ä¶")
            except Exception:
                pass
            return
        for target in game_result['targets']:
            await db.add_event(
                initiator_id=user.id,
                target_id=target[0],
                outcome=game_result['outcome'],
                chat_id=chat_id
            )
        await db.update_user_stats(user.id, game_result['outcome'], is_target=False)
        for target in game_result['targets']:
            await db.update_user_stats(target[0], game_result['outcome'], is_target=True)
        emoji = game_logic.get_emoji_for_outcome(game_result['outcome'])
        result_message = f"{emoji} {game_result['message']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if game_result.get('role_used'):
            role_names = {
                'sniper': 'üéØ –°–Ω–∞–π–ø–µ—Ä',
                'bombardier': 'üí£ –ë–æ–º–±–∞—Ä–¥–∏—Ä',
                'defender': 'üõ°Ô∏è –û–±–æ—Ä–æ–Ω–µ—Ü',
                'drunk_sniper': 'üç∫üéØ –°–Ω–∞–π–ø–µ—Ä‚Äë–ø—å—è–Ω–∏—Ü–∞',
                'berserker': 'ü™ì –ë–µ—Ä—Å–µ—Ä–∫',
                'trickster': 'üÉè –¢—Ä–∏–∫—Å—Ç–µ—Ä',
                'magnet': 'üß≤ –ú–∞–≥–Ω–∏—Ç',
                'saboteur': 'üï≥Ô∏è –°–∞–±–æ—Ç–∞–∂–Ω–∏–∫',
                'oracle': 'üîÆ –û—Ä–∞–∫—É–ª',
                'pyromaniac': 'üî• –ü–∏—Ä–æ–º–∞–Ω',
                'shieldbearer': 'üõ°Ô∏è –©–∏—Ç–æ–Ω–æ—Å–µ—Ü',
                'collector': 'üìé –ö–æ–ª–ª–µ–∫—Ç–æ—Ä',
                'teleporter': 'üåÄ –¢–µ–ª–µ–ø–æ—Ä—Ç–µ—Ä',
                'rocketeer': 'üöÄ –ì–æ–≤–Ω–æ—Ä–∞–∫–µ—Ç—á–∏–∫',
                'snot_sniper': 'ü§ß –°–æ–ø–ª—è‚Äë—Å–Ω–∞–π–ø–µ—Ä',
                'acid_clown': 'üß™ü§° –ö–∏—Å–ª–æ—Ç–Ω—ã–π –∫–ª–æ—É–Ω',
                'counter_guru': 'üîÅ –û–±—Ä–∞—Ç–∫–∞‚Äë–≥—É—Ä—É'
            }
            role_name = role_names.get(game_result['role_used'], 'üé≠ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å')
            result_message += f"\n\nüé≠ –†–æ–ª—å –º–µ—Ç–∞—Ç–µ–ª—è: {role_name}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if game_result.get('public_signals'):
            extras = _format_public_signals(game_result['public_signals'])
            if extras:
                result_message += "\n\n" + "\n".join([f"üì¢ {line}" for line in extras])

        await message.answer(result_message, reply_markup=get_throw_button_with_role(game_result.get('role_used')))
        return
    logger.info(f"üéØ –¶–µ–ª—å –∫–æ–º–∞–Ω–¥—ã /go: @{target_username}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    await db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    participants = await get_chat_participants(chat_id)
    # –î–∞–∂–µ –µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º: –ø–æ–∑–≤–æ–ª—è–µ–º –∫–∏–¥–∞—Ç—å –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π username (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–ª—å)
    
    # –ò—â–µ–º —Ü–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ username
    target_user = None
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID, –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî —á–∏—Å–ª–æ
    if target_username.isdigit():
        numeric_id = int(target_username)
        for user_id, display_name in participants:
            if user_id == numeric_id:
                target_user = (user_id, display_name or f"user{user_id}")
                break
    # –ó–∞—Ç–µ–º –∏—â–µ–º –ø–æ username/–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    if target_user is None:
        for user_id, display_name in participants:
            if not display_name:
                continue
            name_l = display_name.lower()
            arg_l = target_username.lower()
            if name_l == arg_l or name_l.startswith(arg_l):
                target_user = (user_id, display_name)
                break
    
    if not target_user:
        # –†–∞–∑—Ä–µ—à–∞–µ–º –º–µ—Ç–Ω—É—Ç—å –≤ –ª—é–±–æ–≥–æ username: —Å–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        virtual_id = _virtual_user_id_from_username(target_username.lower())
        target_user = (virtual_id, target_username)
        logger.info(f"üß© –¶–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π ID {virtual_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ seen –∏ –≤ –ë–î (–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
        chat_seen_users.setdefault(chat_id, {})[virtual_id] = target_username
        try:
            await db.add_user(user_id=virtual_id, username=target_username)
        except Exception:
            pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–∏–º –º–µ—Ç–∞—Ç–µ–ª–µ–º
    if target_user[0] == user.id:
        error_msg = await message.answer(
            "ü§° –ù–µ–ª—å–∑—è –º–µ—Ç–∞—Ç—å –≥–æ–≤–Ω–æ –≤ —Å–∞–º–æ–≥–æ —Å–µ–±—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ü–µ–ª—å.",
            reply_markup=get_throw_button()
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
        try:
            await error_msg.delete()
            logger.debug(f"üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫–æ–º–∞–Ω–¥—ã /go –æ—Ç {user.username} —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç {user.username}: {e}")
        
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—Ä–æ—Å–æ–∫ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ü–µ–ª—å
    game_result = game_logic.process_throw_at_target(
        initiator_id=user.id,
        initiator_username=user.username or f"user{user.id}",
        target_id=target_user[0],
        target_username=target_user[1],
        chat_id=chat_id
    )
    
    # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫
    if isinstance(game_result, dict) and game_result.get('error') == 'cooldown':
        cooldown_msg = await message.answer(
            f"‚è∞ {game_result['message']}",
            reply_markup=get_throw_button()
        )
        await asyncio.sleep(5)
        try:
            await cooldown_msg.delete()
        except Exception:
            pass
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ (–∫—É–ª–¥–∞—É–Ω, —Å–∞–º–æ—Ü–µ–ª—å –∏ —Ç.–¥.)
    if 'error' in game_result:
        error_msg = await message.answer(
            game_result['message'],
            reply_markup=get_throw_button()
        )
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
        try:
            await error_msg.delete()
        except Exception:
            pass
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await db.update_user_heat(user.id, game_result.get('heat_at_throw', 0))
    await db.update_score(user.id, game_result.get('score_delta', 0))
    if game_result.get('role_used'):
        expires_at = datetime.now() + timedelta(seconds=3600)  # 1 —á–∞—Å
        await db.update_user_role(user.id, game_result['role_used'], expires_at.isoformat())
    await db.update_user_last_throw(user.id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    await db.add_event(
        initiator_id=user.id,
        target_id=target_user[0],
        outcome=game_result['outcome'],
        chat_id=chat_id,
        role_used=game_result.get('role_used'),
        stacks_at_hit=game_result.get('focus_stacks', 0),
        heat_at_hit=game_result.get('heat_at_throw', 0),
        was_reflect=0,  # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ
        targets_json=str(game_result['targets'])
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–∫—É—Å –≤ –ë–î
    focus_stacks = game_result.get('focus_stacks', 0)
    penalty_until = None
    if focus_stacks > 3:  # –®—Ç—Ä–∞—Ñ –∑–∞ —Ñ–æ–∫—É—Å
        penalty_until = (datetime.now() + timedelta(seconds=300)).isoformat()  # 5 –º–∏–Ω—É—Ç
    await db.set_focus(user.id, target_user[0], chat_id, focus_stacks, penalty_until)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await db.update_user_stats(user.id, game_result['outcome'], is_target=False)
    await db.update_user_stats(target_user[0], game_result['outcome'], is_target=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    emoji = game_logic.get_emoji_for_outcome(game_result['outcome'])
    result_message = f"{emoji} {game_result['message']}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏ –∏ heat
    if game_result.get('role_used'):
        role_names = {
            'sniper': 'üéØ –°–Ω–∞–π–ø–µ—Ä',
            'bombardier': 'üí£ –ë–æ–º–±–∞—Ä–¥–∏—Ä', 
            'defender': 'üõ°Ô∏è –û–±–æ—Ä–æ–Ω–µ—Ü',
            'drunk_sniper': 'üç∫üéØ –°–Ω–∞–π–ø–µ—Ä‚Äë–ø—å—è–Ω–∏—Ü–∞',
            'berserker': 'ü™ì –ë–µ—Ä—Å–µ—Ä–∫',
            'trickster': 'üÉè –¢—Ä–∏–∫—Å—Ç–µ—Ä',
            'magnet': 'üß≤ –ú–∞–≥–Ω–∏—Ç',
            'saboteur': 'üï≥Ô∏è –°–∞–±–æ—Ç–∞–∂–Ω–∏–∫',
            'oracle': 'üîÆ –û—Ä–∞–∫—É–ª',
            'pyromaniac': 'üî• –ü–∏—Ä–æ–º–∞–Ω',
            'shieldbearer': 'üõ°Ô∏è –©–∏—Ç–æ–Ω–æ—Å–µ—Ü',
            'collector': 'üìé –ö–æ–ª–ª–µ–∫—Ç–æ—Ä',
            'teleporter': 'üåÄ –¢–µ–ª–µ–ø–æ—Ä—Ç–µ—Ä',
            'rocketeer': 'üöÄ –ì–æ–≤–Ω–æ—Ä–∞–∫–µ—Ç—á–∏–∫',
            'snot_sniper': 'ü§ß –°–æ–ø–ª—è‚Äë—Å–Ω–∞–π–ø–µ—Ä',
            'acid_clown': 'üß™ü§° –ö–∏—Å–ª–æ—Ç–Ω—ã–π –∫–ª–æ—É–Ω',
            'counter_guru': 'üîÅ –û–±—Ä–∞—Ç–∫–∞‚Äë–≥—É—Ä—É'
        }
        role_name = role_names.get(game_result['role_used'], 'üé≠ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å')
        result_message += f"\n\nüé≠ –†–æ–ª—å –º–µ—Ç–∞—Ç–µ–ª—è: {role_name}"
    
    if game_result.get('heat_at_throw', 0) > 50:
        result_message += f"\nüî• –†–µ–ø—É—Ç–∞—Ü–∏—è –∞–≥—Ä–µ—Å—Å–æ—Ä–∞: {game_result['heat_at_throw']}/100"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if game_result.get('public_signals'):
        extras = _format_public_signals(game_result['public_signals'])
        if extras:
            result_message += "\n\n" + "\n".join([f"üì¢ {line}" for line in extras])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(
        result_message,
        reply_markup=get_throw_button_with_role(game_result.get('role_used'))
    )
    
    # –ë–æ–ª—å—à–µ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /go
    
    logger.info(f"‚úÖ –¶–µ–ª–µ–≤–æ–π –±—Ä–æ—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {user.username} -> {target_user[1]} -> {game_result['outcome']}")

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥!)
@dp.message(F.text & ~F.text.startswith('/'))
async def _collect_seen_users(message: types.Message):
    """–¢–∏—Ö–∏–π —Å–±–æ—Ä –∞–≤—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è basic-–≥—Ä—É–ø–ø)."""
    try:
        if message and message.from_user and message.chat:
            _record_seen_user(message.chat.id, message.from_user)
    except Exception:
        pass

# –ö—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ Telegram API)
chat_participants_cache = {}
"""–ö—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ API/–ë–î —Å —Ç–∞–π–º-—Å–ª–æ—Ç–æ–º ~10 –º–∏–Ω—É—Ç"""

# –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è basic-–≥—Ä—É–ø–ø: –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ —Å–æ–±—ã—Ç–∏—è–º
chat_seen_users: dict[int, dict[int, str]] = {}
"""chat_id -> { user_id: display_name }"""

def _display_name_from_user(user: types.User) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: —Ç–æ–ª—å–∫–æ username –∏–ª–∏ user{id}."""
    return user.username or f"user{user.id}"

def _record_seen_user(chat_id: int, user: types.User) -> None:
    if chat_id not in chat_seen_users:
        chat_seen_users[chat_id] = {}
    chat_seen_users[chat_id][user.id] = _display_name_from_user(user)

def _virtual_user_id_from_username(username: str) -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π user_id –ø–æ username (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID)."""
    import hashlib
    base = int(hashlib.md5(username.encode('utf-8')).hexdigest()[:8], 16)
    return -abs(base)

def get_throw_button() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—Ä–æ—Å–∫–∞ –≥–æ–≤–Ω–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üí© –ú–µ—Ç–Ω—É—Ç—å –≥–æ–≤–Ω–∞", callback_data="throw_shit"))
    return builder.as_markup()

def get_throw_button_with_role(role_used: str = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—Ä–æ—Å–∫–∞ –≥–æ–≤–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–∏"""
    builder = InlineKeyboardBuilder()
    
    if role_used:
        builder.add(InlineKeyboardButton(text="üé≠ –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏", callback_data=f"role_info:{role_used}"))
    
    builder.add(InlineKeyboardButton(text="üí© –ú–µ—Ç–Ω—É—Ç—å –≥–æ–≤–Ω–∞", callback_data="throw_shit"))
    
    return builder.as_markup()

def _format_public_signals(signals: dict) -> list[str]:
    messages: list[str] = []
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ callouts (–≤–∫–ª—é—á–∞—è —Ñ—Ä–∞–∑—ã –ø—Ä–æ —Ñ–æ–∫—É—Å –∏ heat)
        for line in signals.get('callouts', []):
            messages.append(line.replace('/go @', '/go@'))
        
        # –î–æ–±–∞–≤–ª—è–µ–º call_to_action (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é)
        if signals.get('call_to_action'):
            messages.append(signals['call_to_action'].replace('/go @', '/go@'))
            
    except Exception:
        pass
    return messages

async def _auto_delete(msg: types.Message, delay: int = 5):
    try:
        await asyncio.sleep(delay)
        try:
            await msg.delete()
        except Exception:
            pass
    except Exception:
        pass

def schedule_auto_delete(msg: types.Message, delay: int = 5):
    try:
        asyncio.create_task(_auto_delete(msg, delay))
    except Exception:
        pass

async def get_chat_participants(chat_id: int) -> List[Tuple[int, str]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram API"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
        cache_key = f"{chat_id}_{datetime.now().strftime('%Y%m%d_%H%M')[:-1]}"  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 10 –º–∏–Ω—É—Ç
        
        if cache_key not in chat_participants_cache:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram API
                chat_member_count = await bot.get_chat_member_count(chat_id)
                logger.info(f"üë• –í —á–∞—Ç–µ {chat_id} –≤—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat_member_count}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º 200 –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
                participants = []
                # –í Bot API –Ω–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ basic-–≥—Ä—É–ø–ø—ã.
                # –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–ª–∏–º—Å—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∏–∂–µ.
                async for member in bot.get_chat_members(chat_id, limit=200):  # –º–æ–∂–µ—Ç –±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ basic-–≥—Ä—É–ø–ø–∞—Ö
                    if not member.user.is_bot:
                        username = member.user.username or f"user{member.user.id}"
                        participants.append((member.user.id, username))
                
                chat_participants_cache[cache_key] = participants
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id} —á–µ—Ä–µ–∑ API")
                
            except Exception as api_error:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ API: {api_error}")
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                participants = await db.get_chat_participants(chat_id)
                # –ï—Å–ª–∏ –∏ –≤ –ë–î –ø—É—Å—Ç–æ (–Ω–æ–≤—ã–π —á–∞—Ç), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
                if not participants:
                    seen = chat_seen_users.get(chat_id, {})
                    participants = [(uid, name) for uid, name in seen.items()]
                    if participants:
                        logger.info(f"üß© –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º: {len(participants)}")
                chat_participants_cache[cache_key] = participants
                logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î/seen: {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        participants = chat_participants_cache[cache_key]

        # –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å –∏–∑ seen/–ë–î –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
        if not participants:
            seen_now = chat_seen_users.get(chat_id, {})
            if seen_now:
                participants = [(uid, name) for uid, name in seen_now.items()]
                chat_participants_cache[cache_key] = participants
                logger.info(f"üß© –û–±–Ω–æ–≤–∏–ª–∏ –∫—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ seen: {len(participants)}")
            else:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî –≤–∑—è—Ç—å –∏–∑ –ë–î
                participants = await db.get_chat_participants(chat_id)
                if participants:
                    chat_participants_cache[cache_key] = participants
                    logger.info(f"üì¶ –û–±–Ω–æ–≤–∏–ª–∏ –∫—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ë–î: {len(participants)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏
        if not participants:
            logger.warning(f"‚ö†Ô∏è –í —á–∞—Ç–µ {chat_id} –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã")
            return []
        
        logger.info(f"üë• –ò—Å–ø–æ–ª—å–∑—É–µ–º {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}")
        return participants
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}: {e}")
        return []

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    schedule_auto_delete(message, 3)
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —É–≤–∏–¥–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–¥–ª—è basic-–≥—Ä—É–ø–ø)
    _record_seen_user(chat_id, user)
    
    await message.answer(
        "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É ¬´–ì–æ–≤–Ω–æ–ú—ë—Ç¬ª!\n\n"
        "üí© –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –º–µ—Ç–Ω—É—Ç—å –≥–æ–≤–Ω–∞ –≤ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞.\n\n"
        "üéØ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /go@–∏–º—è –¥–ª—è –º–µ—Ç–∞–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n"
        "üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–≥–¥–∞ —Å–ª—É—á–∞–π–Ω—ã–π - –º–æ–∂–µ—à—å –ø–æ–ø–∞—Å—Ç—å –≤ —Ü–µ–ª—å, –ø—Ä–æ–º–∞—Ö–Ω—É—Ç—å—Å—è –∏–ª–∏ —É—Å—Ç—Ä–æ–∏—Ç—å –≥–æ–≤–Ω–æ–±—É–º!\n\n"
        "üî• –¶–µ–ª—å –∏–≥—Ä—ã - –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —á–∞—Ç –≤ –≥–æ–≤–Ω–æ—Ö–∞–æ—Å!\n"
        "üí° –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —á–∞—Ç–µ, –¥–∞–∂–µ —Å –æ–¥–Ω–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º!",
        reply_markup=get_throw_button()
    )
    
    logger.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")

# –î—É–±–ª–∏—Ä—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–ª—É—á–∞–µ–≤ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞ (/cmd@Bot) –∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤
@dp.message(F.text.regexp(r"^/start(?:@[A-Za-z0-9_]+)?(?:\s|$)"))
async def cmd_start_alias(message: types.Message):
    return await cmd_start(message)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    schedule_auto_delete(message, 3)
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"‚ùì –ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}")
    
    help_text = (
        "üéØ <b>–ì–æ–≤–Ω–æ–ú—ë—Ç - –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</b>\n\n"
        "üí© <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n"
        "‚Ä¢ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üí© –ú–µ—Ç–Ω—É—Ç—å –≥–æ–≤–Ω–∞¬ª –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π —Ü–µ–ª–∏\n"
        "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /go@–∏–º—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏\n"
        "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –≤ —á–∞—Ç–µ\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —á–∞—Ç–µ, –¥–∞–∂–µ —Å –æ–¥–Ω–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º!\n\n"
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        "‚Ä¢ /stats - –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ –∏ –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
        "üìä <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞\n"
        ""
        "/refresh - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/participants - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/go@–∏–º—è - –º–µ—Ç–Ω—É—Ç—å –≥–æ–≤–Ω–æ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "üî• <b>–¶–µ–ª—å:</b> –£—Å—Ç—Ä–æ–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≥–æ–≤–Ω–æ—Ö–∞–æ—Å –≤ —á–∞—Ç–µ!"
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∞
    _record_seen_user(chat_id, user)
    
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_throw_button())
    logger.info(f"‚úÖ –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")

@dp.message(F.text.regexp(r"^/help(?:@[A-Za-z0-9_]+)?(?:\s|$)"))
async def cmd_help_alias(message: types.Message):
    return await cmd_help(message)

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞"""
    schedule_auto_delete(message, 3)
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"üìä –ö–æ–º–∞–Ω–¥–∞ /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    chat_stats = await db.get_chat_stats(chat_id, days=30)
    game_stats = await db.get_game_stats(chat_id, days=30)
    
    if not chat_stats:
        stats_text = "üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å!"
        await message.answer(stats_text, parse_mode="HTML", reply_markup=get_throw_button())
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
    stats_text = f"üìä <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–ê–¢–ê (30 –¥–Ω–µ–π):</b>\n\n"
    
    # –û–±—â–∏–µ —Ü–∏—Ñ—Ä—ã
    total_throws = chat_stats.get('total_throws', 0)
    stats_text += f"üéØ <b>–í—Å–µ–≥–æ –±—Ä–æ—Å–∫–æ–≤:</b> {total_throws}\n"
    

    
    # –¢–æ–ø –º–µ—Ç–∞—Ç–µ–ª–µ–π
    top_throwers = chat_stats.get('top_throwers', [])
    if top_throwers:
        stats_text += "\nüèÜ <b>–¢–æ–ø –º–µ—Ç–∞—Ç–µ–ª–µ–π:</b>\n"
        for i, (username, throws) in enumerate(top_throwers, 1):
            stats_text += f"{i}. @{username}: {throws} –±—Ä–æ—Å–∫–æ–≤\n"
    
    # –¢–æ–ø —Å—Ç—Ä–∞–¥–∞–ª—å—Ü–µ–≤
    top_victims = chat_stats.get('top_victims', [])
    if top_victims:
        stats_text += "\nüòµ <b>–¢–æ–ø —Å—Ç—Ä–∞–¥–∞–ª—å—Ü–µ–≤:</b>\n"
        for i, (username, hits) in enumerate(top_victims, 1):
            stats_text += f"{i}. @{username}: {hits} –ø–æ–ø–∞–¥–∞–Ω–∏–π\n"
    
    # –¢–æ–ø –Ω–µ—É–¥–∞—á–Ω–∏–∫–æ–≤
    top_losers = chat_stats.get('top_losers', [])
    if top_losers:
        stats_text += "\nü§° <b>–¢–æ–ø –Ω–µ—É–¥–∞—á–Ω–∏–∫–æ–≤:</b>\n"
        for i, (username, self_hits) in enumerate(top_losers, 1):
            stats_text += f"{i}. @{username}: {self_hits} —Ä–∞–∑ —Å–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª\n"
    
    # –¢–æ–ø —Å–Ω–∞–π–ø–µ—Ä–æ–≤
    top_snipers = chat_stats.get('top_snipers', [])
    if top_snipers:
        stats_text += "\nüéØ <b>–¢–æ–ø —Å–Ω–∞–π–ø–µ—Ä–æ–≤:</b>\n"
        for i, (username, hits, total, accuracy) in enumerate(top_snipers, 1):
            stats_text += f"{i}. @{username}: {accuracy}% —Ç–æ—á–Ω–æ—Å—Ç—å ({hits}/{total})\n"
    

    
    # –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if game_stats:
        stats_text += "\nüéÆ <b>–ò–ì–†–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
        
        # –°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –≥–æ–≤–Ω–æ-—Å—Ç—Ä–∏–∫
        longest_streak = game_stats.get('longest_streak')
        if longest_streak and longest_streak[1] > 0:
            username, streak = longest_streak
            stats_text += f"üî• <b>–°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –≥–æ–≤–Ω–æ-—Å—Ç—Ä–∏–∫:</b> @{username} ({streak} –ø–æ–¥—Ä—è–¥)\n"
        
        # –ì–æ–≤–Ω–æ-–º–∞—Å—Ç–µ—Ä
        shit_master = game_stats.get('shit_master')
        if shit_master:
            username, unique_targets = shit_master
            stats_text += f"üëë <b>–ì–æ–≤–Ω–æ-–º–∞—Å—Ç–µ—Ä:</b> @{username} (–º–µ—Ç–Ω—É–ª –≤ {unique_targets} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)\n"
        
        # –ì–æ–≤–Ω–æ-–≤–µ–∑–µ–Ω–∏–µ
        lucky_bastard = game_stats.get('lucky_bastard')
        if lucky_bastard:
            username, times_hit, times_thrown = lucky_bastard
            stats_text += f"üçÄ <b>–ì–æ–≤–Ω–æ-–≤–µ–∑–µ–Ω–∏–µ:</b> @{username} (–±—Ä–æ—Å–∏–ª {times_thrown}, –ø–æ–ª—É—á–∏–ª {times_hit})\n"
        
        # –ì–æ–≤–Ω–æ-–º–∞–≥
        shit_mage = game_stats.get('shit_mage')
        if shit_mage:
            username, special_effects = shit_mage
            stats_text += f"‚ö° <b>–ì–æ–≤–Ω–æ-–º–∞–≥:</b> @{username} ({special_effects} –æ—Å–æ–±—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤)\n"
    
    # –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã
    
    # –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = await db.get_user_stats(user.id, chat_id)
    if user_stats:
        stats_text += f"\nüë§ <b>–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
        stats_text += f"üéØ –ü—Ä—è–º—ã—Ö –ø–æ–ø–∞–¥–∞–Ω–∏–π: {user_stats['direct_hits']}\n"
        stats_text += f"üí© –°–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª: {user_stats['self_hits']}\n"
        stats_text += f"üòµ –°—Ç—Ä–∞–¥–∞–ª –æ—Ç –¥—Ä—É–≥–∏—Ö: {user_stats['times_hit']}\n"
        
        total_throws = user_stats['direct_hits'] + user_stats['self_hits']
        if total_throws > 0:
            accuracy = round((user_stats['direct_hits'] / total_throws) * 100, 1)
            stats_text += f"üéØ –í–∞—à–∞ —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy}%\n"
        
        total_score = user_stats['direct_hits'] - user_stats['self_hits']
        stats_text += f"üî• –û–±—â–∏–π —Å—á—ë—Ç: {total_score}"
    
    await message.answer(stats_text, parse_mode="HTML", reply_markup=get_throw_button())
    logger.info(f"‚úÖ –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")

@dp.message(F.text.regexp(r"^/stats(?:@[A-Za-z0-9_]+)?(?:\s|$)"))
async def cmd_stats_alias(message: types.Message):
    return await cmd_stats(message)

# –ö–æ–º–∞–Ω–¥–∞ /ratings —É–¥–∞–ª–µ–Ω–∞

@dp.callback_query(F.data.startswith("role_info:"))
async def show_role_info(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏"""
    try:
        role_key = callback.data.split(":", 1)[1]
        user = callback.from_user
        chat_id = callback.message.chat.id
        
        logger.info(f"üé≠ –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–∏ {role_key} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏ –∏–∑ –ë–î
        role_info = await db.get_role_info(role_key)
        
        if not role_info:
            await callback.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏
        role_text = f"üé≠ <b>{role_info['role_name']}</b>\n"
        role_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {role_info['description']}\n"
        role_text += f"‚ö° <b>–ë–æ–Ω—É—Å—ã:</b> {role_info['bonuses']}\n"
        
        if role_info['penalties']:
            role_text += f"‚ö†Ô∏è <b>–®—Ç—Ä–∞—Ñ—ã:</b> {role_info['penalties']}\n"
        
        if role_info['special_effects']:
            role_text += f"‚ú® <b>–û—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:</b> {role_info['special_effects']}\n"
        
        role_text += f"üéØ <b>–°—Ç–∏–ª—å –∏–≥—Ä—ã:</b> {role_info['style']}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏
        role_msg = await callback.message.answer(role_text, parse_mode="HTML")
        
        # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        schedule_auto_delete(role_msg, 30)
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        try:
            await callback.answer("üé≠ –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–æ")
        except Exception:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª)")
        
        logger.info(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ {role_key} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–∏: {e}")
        try:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª–∏")
        except Exception:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª)")

@dp.callback_query(F.data == "throw_shit")
async def process_throw_shit(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –±—Ä–æ—Å–∫–∞ –≥–æ–≤–Ω–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ callback (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –¥–æ 24 —á–∞—Å–æ–≤)
        if callback.message.date:
            now_utc = datetime.now(timezone.utc)
            msg_date = callback.message.date
            if (now_utc - msg_date).total_seconds() > 86400:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback –æ—Ç {callback.from_user.username}")
                try:
                    await callback.answer("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                except Exception:
                    pass
                return
        
        user = callback.from_user
        chat_id = callback.message.chat.id

        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (basic-–≥—Ä—É–ø–ø—ã)
        _record_seen_user(chat_id, user)
        
        logger.info(f"üí© –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.username} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        await db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        participants = await get_chat_participants(chat_id)
        
        if not participants:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}")
            try:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.")
            except Exception:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª)")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—Ä–æ—Å–æ–∫
        game_result = game_logic.process_throw(
            initiator_id=user.id,
            initiator_username=user.username or f"user{user.id}",
            participants=participants,
            chat_id=chat_id
        )
        
        # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫
        if isinstance(game_result, dict) and game_result.get('error') == 'cooldown':
            cooldown_msg = await callback.message.answer(
                f"‚è∞ {game_result['message']}",
                reply_markup=get_throw_button()
            )
            schedule_auto_delete(cooldown_msg, 5)
            try:
                await callback.answer("‚è∞ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ‚Ä¶")
            except Exception:
                pass
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É
        for target in game_result['targets']:
            await db.add_event(
                initiator_id=user.id,
                target_id=target[0],
                outcome=game_result['outcome'],
                chat_id=chat_id
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await db.update_user_stats(user.id, game_result['outcome'], is_target=False)
        for target in game_result['targets']:
            await db.update_user_stats(target[0], game_result['outcome'], is_target=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        emoji = game_logic.get_emoji_for_outcome(game_result['outcome'])
        result_message = f"{emoji} {game_result['message']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if game_result.get('role_used'):
            role_names = {
                'sniper': 'üéØ –°–Ω–∞–π–ø–µ—Ä',
                'bombardier': 'üí£ –ë–æ–º–±–∞—Ä–¥–∏—Ä',
                'defender': 'üõ°Ô∏è –û–±–æ—Ä–æ–Ω–µ—Ü',
                'drunk_sniper': 'üç∫üéØ –°–Ω–∞–π–ø–µ—Ä‚Äë–ø—å—è–Ω–∏—Ü–∞',
                'berserker': 'ü™ì –ë–µ—Ä—Å–µ—Ä–∫',
                'trickster': 'üÉè –¢—Ä–∏–∫—Å—Ç–µ—Ä',
                'magnet': 'üß≤ –ú–∞–≥–Ω–∏—Ç',
                'saboteur': 'üï≥Ô∏è –°–∞–±–æ—Ç–∞–∂–Ω–∏–∫',
                'oracle': 'üîÆ –û—Ä–∞–∫—É–ª',
                'pyromaniac': 'üî• –ü–∏—Ä–æ–º–∞–Ω',
                'shieldbearer': 'üõ°Ô∏è –©–∏—Ç–æ–Ω–æ—Å–µ—Ü',
                'collector': 'üìé –ö–æ–ª–ª–µ–∫—Ç–æ—Ä',
                'teleporter': 'üåÄ –¢–µ–ª–µ–ø–æ—Ä—Ç–µ—Ä',
                'rocketeer': 'üöÄ –ì–æ–≤–Ω–æ—Ä–∞–∫–µ—Ç—á–∏–∫',
                'snot_sniper': 'ü§ß –°–æ–ø–ª—è‚Äë—Å–Ω–∞–π–ø–µ—Ä',
                'acid_clown': 'üß™ü§° –ö–∏—Å–ª–æ—Ç–Ω—ã–π –∫–ª–æ—É–Ω',
                'counter_guru': 'üîÅ –û–±—Ä–∞—Ç–∫–∞‚Äë–≥—É—Ä—É'
            }
            role_name = role_names.get(game_result['role_used'], 'üé≠ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å')
            result_message += f"\n\nüé≠ –†–æ–ª—å –º–µ—Ç–∞—Ç–µ–ª—è: {role_name}"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if game_result.get('public_signals'):
            extras = _format_public_signals(game_result['public_signals'])
            if extras:
                result_message += "\n\n" + "\n".join([f"üì¢ {line}" for line in extras])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.message.answer(
            result_message,
            reply_markup=get_throw_button_with_role(game_result.get('role_used'))
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        try:
            await callback.answer("üí© –ì–æ–≤–Ω–æ –ø–æ–ª–µ—Ç–µ–ª–æ!")
        except Exception:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª)")
        
        logger.info(f"‚úÖ –ë—Ä–æ—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {user.username} -> {game_result['outcome']} -> {len(game_result['targets'])} —Ü–µ–ª–µ–π")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ—Å–∫–∞: {e}")
        try:
            await callback.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        except Exception:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª)")

@dp.message(F.text.contains("–∫–∏–Ω—É—Ç—å –≥–æ–≤–Ω–æ –≤"))
async def handle_manual_throw(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –±—Ä–æ—Å–∫–∞"""
    try:
        schedule_auto_delete(message, 3)
        user = message.from_user
        chat_id = message.chat.id

        _record_seen_user(chat_id, user)
        
        logger.info(f"üí© –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã –æ—Ç {user.username} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}: {message.text}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username —Ü–µ–ª–∏
        text = message.text.lower()
        if "–∫–∏–Ω—É—Ç—å –≥–æ–≤–Ω–æ –≤ @" in text:
            target_username = text.split("–∫–∏–Ω—É—Ç—å –≥–æ–≤–Ω–æ –≤ @")[1].split()[0]
            logger.debug(f"üéØ –¶–µ–ª—å —Ä—É—á–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞: @{target_username}")
            
            # –ë–æ–ª—å—à–µ –Ω–µ —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
            await db.add_user(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
            participants = await get_chat_participants(chat_id)
            
            if participants:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—Ä–æ—Å–æ–∫
                game_result = game_logic.process_throw(
                    initiator_id=user.id,
                    initiator_username=user.username or f"user{user.id}",
                    participants=participants,
                    chat_id=chat_id
                )
                
                # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫
                if isinstance(game_result, dict) and game_result.get('error') == 'cooldown':
                    await message.answer(
                        f"‚è∞ {game_result['message']}",
                        reply_markup=get_throw_button()
                    )
                    try:
                        await message.answer("‚è∞ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ‚Ä¶")
                    except Exception:
                        pass
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É
                for target in game_result['targets']:
                    await db.add_event(
                        initiator_id=user.id,
                        target_id=target[0],
                        outcome=game_result['outcome'],
                        chat_id=chat_id
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await db.update_user_stats(user.id, game_result['outcome'], is_target=False)
                for target in game_result['targets']:
                    await db.update_user_stats(target[0], game_result['outcome'], is_target=True)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                emoji = game_logic.get_emoji_for_outcome(game_result['outcome'])
                result_message = f"{emoji} {game_result['message']}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                if game_result.get('role_used'):
                    role_names = {
                        'sniper': 'üéØ –°–Ω–∞–π–ø–µ—Ä',
                        'bombardier': 'üí£ –ë–æ–º–±–∞—Ä–¥–∏—Ä',
                        'defender': 'üõ°Ô∏è –û–±–æ—Ä–æ–Ω–µ—Ü',
                        'drunk_sniper': 'üç∫üéØ –°–Ω–∞–π–ø–µ—Ä‚Äë–ø—å—è–Ω–∏—Ü–∞',
                        'berserker': 'ü™ì –ë–µ—Ä—Å–µ—Ä–∫',
                        'trickster': 'üÉè –¢—Ä–∏–∫—Å—Ç–µ—Ä',
                        'magnet': 'üß≤ –ú–∞–≥–Ω–∏—Ç',
                        'saboteur': 'üï≥Ô∏è –°–∞–±–æ—Ç–∞–∂–Ω–∏–∫',
                        'oracle': 'üîÆ –û—Ä–∞–∫—É–ª',
                        'pyromaniac': 'üî• –ü–∏—Ä–æ–º–∞–Ω',
                        'shieldbearer': 'üõ°Ô∏è –©–∏—Ç–æ–Ω–æ—Å–µ—Ü',
                        'collector': 'üìé –ö–æ–ª–ª–µ–∫—Ç–æ—Ä',
                        'teleporter': 'üåÄ –¢–µ–ª–µ–ø–æ—Ä—Ç–µ—Ä',
                        'rocketeer': 'üöÄ –ì–æ–≤–Ω–æ—Ä–∞–∫–µ—Ç—á–∏–∫',
                        'snot_sniper': 'ü§ß –°–æ–ø–ª—è‚Äë—Å–Ω–∞–π–ø–µ—Ä',
                        'acid_clown': 'üß™ü§° –ö–∏—Å–ª–æ—Ç–Ω—ã–π –∫–ª–æ—É–Ω',
                        'counter_guru': 'üîÅ –û–±—Ä–∞—Ç–∫–∞‚Äë–≥—É—Ä—É'
                    }
                    role_name = role_names.get(game_result['role_used'], 'üé≠ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å')
                    result_message += f"\n\nüé≠ –†–æ–ª—å –º–µ—Ç–∞—Ç–µ–ª—è: {role_name}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if game_result.get('public_signals'):
                    extras = _format_public_signals(game_result['public_signals'])
                    if extras:
                        result_message += "\n\n" + "\n".join([f"üì¢ {line}" for line in extras])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await message.answer(
                    result_message,
                    reply_markup=get_throw_button_with_role(game_result.get('role_used'))
                )
                
                logger.info(f"‚úÖ –†—É—á–Ω–æ–π –±—Ä–æ—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {user.username} -> {game_result['outcome']} -> {len(game_result['targets'])} —Ü–µ–ª–µ–π")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id} –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞")
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—É—á–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞: {e}")

@dp.message(Command("refresh"))
async def cmd_refresh(message: types.Message):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
    schedule_auto_delete(message, 3)
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"üîÑ –ö–æ–º–∞–Ω–¥–∞ /refresh –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∞
    _record_seen_user(chat_id, user)

    # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ (—É–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —á–∞—Ç–æ–º)
    keys_to_remove = [key for key in chat_participants_cache.keys() if key.startswith(f"{chat_id}_")]
    for key in keys_to_remove:
        del chat_participants_cache[key]
        logger.info(f"üóëÔ∏è –ö—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id} –æ—á–∏—â–µ–Ω (–∫–ª—é—á: {key})")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants = await get_chat_participants(chat_id)
    
    if participants:
        success_msg = await message.answer(
            f"‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            reply_markup=get_throw_button()
        )
        logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        # –ë–æ–ª—å—à–µ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    else:
        error_msg = await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.",
            reply_markup=get_throw_button()
        )
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}")
        
        # –ë–æ–ª—å—à–µ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

@dp.message(F.text.regexp(r"^/refresh(?:@[A-Za-z0-9_]+)?(?:\s|$)"))
async def cmd_refresh_alias(message: types.Message):
    return await cmd_refresh(message)

@dp.message(Command("participants"))
async def cmd_participants(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
    schedule_auto_delete(message, 3)
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"üë• –ö–æ–º–∞–Ω–¥–∞ /participants –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∞
    _record_seen_user(chat_id, user)

    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    participants = await get_chat_participants(chat_id)
    
    if not participants:
        error_msg = await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.",
            reply_markup=get_throw_button()
        )
        
        # –ë–æ–ª—å—à–µ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants_text = f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ ({len(participants)}):</b>\n\n"
    
    for i, (user_id, username) in enumerate(participants, 1):
        display_name = f"@{username}" if username and not username.startswith("user") else username
        participants_text += f"{i}. {display_name}\n"
    
    participants_text += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /go@–∏–º—è –¥–ª—è –º–µ—Ç–∞–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    participants_msg = await message.answer(
        participants_text,
        parse_mode="HTML",
        reply_markup=get_throw_button()
    )
    
    logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")
    
    # –ë–æ–ª—å—à–µ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

@dp.message(F.text.regexp(r"^/participants(?:@[A-Za-z0-9_]+)?(?:\s|$)"))
async def cmd_participants_alias(message: types.Message):
    return await cmd_participants(message)

# –£–±—Ä–∞–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–ª–∏–∞—Å –¥–ª—è /go@user, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.log_startup()
    max_retries = 5
    retry_delay = 10
    
    try:
        for attempt in range(max_retries):
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
                logger.info(f"ü§ñ –ë–æ—Ç –ì–æ–≤–Ω–æ–ú—ë—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                await dp.start_polling(bot, skip_updates=True)
                break  # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                if attempt < max_retries - 1:
                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(retry_delay)
                    retry_delay *= 2
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
                    break
    finally:
        logger.log_shutdown()
        try:
            await bot.session.close()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(main())



