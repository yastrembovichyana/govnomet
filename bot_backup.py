import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Tuple

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import BOT_TOKEN, GAME_SETTINGS, LOGGING_SETTINGS
from database import Database
from game_logic import GameLogic
from logger_config import setup_logging, get_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging(
    log_dir=LOGGING_SETTINGS['log_directory'],
    max_size_mb=LOGGING_SETTINGS['max_log_size_mb']
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
game_logic = GameLogic()

# –ö—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ Telegram API)
chat_participants_cache = {}

def get_throw_button() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—Ä–æ—Å–∫–∞ –≥–æ–≤–Ω–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üí© –ö–∏–Ω—É—Ç—å –≥–æ–≤–Ω–æ", callback_data="throw_shit"))
    return builder.as_markup()

async def get_chat_participants(chat_id: int) -> List[Tuple[int, str]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if chat_id not in chat_participants_cache:
            participants = await db.get_chat_participants(chat_id)
            chat_participants_cache[chat_id] = participants
        
        # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        if not chat_participants_cache[chat_id]:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            test_participants = [
                (123456789, "test_user1"),
                (987654321, "test_user2"),
                (555666777, "test_user3")
            ]
            chat_participants_cache[chat_id] = test_participants
            logger.info(f"üë• –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {len(test_participants)}")
        
        return chat_participants_cache[chat_id]
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}: {e}")
        return []

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}")
    
    await message.answer(
        "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É ¬´–ì–æ–≤–Ω–æ–ú—ë—Ç¬ª!\n\n"
        "üí© –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∫–∏–Ω—É—Ç—å –≥–æ–≤–Ω–æ –≤ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞.\n\n"
        "üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–≥–¥–∞ —Å–ª—É—á–∞–π–Ω—ã–π - –º–æ–∂–µ—à—å –ø–æ–ø–∞—Å—Ç—å –≤ —Ü–µ–ª—å, –ø—Ä–æ–º–∞—Ö–Ω—É—Ç—å—Å—è –∏–ª–∏ —É—Å—Ç—Ä–æ–∏—Ç—å –≥–æ–≤–Ω–æ–±—É–º!\n\n"
        "üî• –¶–µ–ª—å –∏–≥—Ä—ã - –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —á–∞—Ç –≤ –≥–æ–≤–Ω–æ—Ö–∞–æ—Å!",
        reply_markup=get_throw_button()
    )
    
    logger.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"‚ùì –ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}")
    
    help_text = (
        "üéØ <b>–ì–æ–≤–Ω–æ–ú—ë—Ç - –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</b>\n\n"
        "üí© <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n"
        "‚Ä¢ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üí© –ö–∏–Ω—É—Ç—å –≥–æ–≤–Ω–æ¬ª\n"
        "‚Ä¢ –ë–æ—Ç —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–µ—Ä–µ—Ç —Ü–µ–ª—å\n"
        "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –≤ —á–∞—Ç–µ\n\n"
        "üé≤ <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ö–æ–¥—ã:</b>\n"
        "‚Ä¢ üéØ <b>–ü—Ä—è–º–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ (40%)</b> - –≥–æ–≤–Ω–æ –ª–µ—Ç–∏—Ç —Ç–æ—á–Ω–æ –≤ —Ü–µ–ª—å\n"
        "‚Ä¢ ü§° <b>–ü—Ä–æ–º–∞—Ö (20%)</b> - –≥–æ–≤–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –º–µ—Ç–∞—Ç–µ–ª—è\n"
        "‚Ä¢ ü§Æ <b>–†–∞–∑–ª–µ—Ç–µ–ª–æ—Å—å (30%)</b> - –≥–æ–≤–Ω–æ –∑–∞–¥–µ–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ ‚ö° <b>–û—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (10%)</b> - –±—É–º–µ—Ä–∞–Ω–≥, –ª–∞–≤–∏–Ω–∞, –∫–∏—Ä–ø–∏—á –∏ —Ç.–¥.\n\n"
        "üìä <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/ratings - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏\n\n"
        "üî• <b>–¶–µ–ª—å:</b> –£—Å—Ç—Ä–æ–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≥–æ–≤–Ω–æ—Ö–∞–æ—Å –≤ —á–∞—Ç–µ!"
    )
    
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_throw_button())
    logger.info(f"‚úÖ –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"üìä –ö–æ–º–∞–Ω–¥–∞ /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}")
    
    user_id = user.id
    stats = await db.get_user_stats(user_id)
    
    if stats:
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @{message.from_user.username or 'user'}:</b>\n\n"
            f"üéØ <b>–ü—Ä—è–º—ã—Ö –ø–æ–ø–∞–¥–∞–Ω–∏–π:</b> {stats['direct_hits']}\n"
            f"ü§° <b>–ü—Ä–æ–º–∞—Ö–æ–≤:</b> {stats['misses']}\n"
            f"üí© <b>–°–∞–º —Å–µ–±—è –æ–±–æ—Å—Ä–∞–ª:</b> {stats['self_hits']}\n"
            f"üòµ <b>–°—Ç—Ä–∞–¥–∞–ª –æ—Ç –¥—Ä—É–≥–∏—Ö:</b> {stats['times_hit']}\n\n"
            f"üî• <b>–û–±—â–∏–π —Å—á—ë—Ç:</b> {stats['direct_hits'] - stats['misses'] - stats['self_hits']}"
        )
        logger.debug(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {stats}")
    else:
        stats_text = "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å!"
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
    
    await message.answer(stats_text, parse_mode="HTML", reply_markup=get_throw_button())
    logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")

@dp.message(Command("ratings"))
async def cmd_ratings(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏"""
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"üèÜ –ö–æ–º–∞–Ω–¥–∞ /ratings –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}")
    
    ratings = await db.get_ratings(chat_id, days=7)
    
    ratings_text = "üèÜ <b>–†–µ–π—Ç–∏–Ω–≥–∏ –Ω–µ–¥–µ–ª–∏:</b>\n\n"
    
    if ratings.get('king'):
        username, hits = ratings['king']
        ratings_text += f"üëë <b>–ö–æ—Ä–æ–ª—å –≥–æ–≤–Ω–∞:</b> @{username} ({hits} –ø–æ–ø–∞–¥–∞–Ω–∏–π)\n"
    
    if ratings.get('victim'):
        username, hit_count = ratings['victim']
        ratings_text += f"üòµ <b>–ì–ª–∞–≤–Ω—ã–π –æ–±–æ—Å—Ä–∞–Ω–Ω—ã–π:</b> @{username} ({hit_count} —Ä–∞–∑)\n"
    
    if ratings.get('idiot'):
        username, self_hits = ratings['idiot']
        ratings_text += f"ü§° <b>–î–æ–ª–±–æ—ë–± –Ω–µ–¥–µ–ª–∏:</b> @{username} ({self_hits} —Ä–∞–∑)\n"
    
    if not any(ratings.values()):
        ratings_text += "üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤. –ò–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ!"
    
    await message.answer(ratings_text, parse_mode="HTML", reply_markup=get_throw_button())
    logger.info(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")

@dp.callback_query(F.data == "throw_shit")
async def process_throw_shit(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –±—Ä–æ—Å–∫–∞ –≥–æ–≤–Ω–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ callback
        if callback.message.date and (datetime.now().replace(tzinfo=None) - callback.message.date.replace(tzinfo=None)).total_seconds() > 60:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback –æ—Ç {callback.from_user.username}")
            try:
                await callback.answer("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            except Exception:
                pass
            return
        
        user = callback.from_user
        chat_id = callback.message.chat.id
        
        logger.info(f"üí© –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.username} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        await db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        participants = await get_chat_participants(chat_id)
        
        if not participants:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}")
            try:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞")
            except Exception:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª)")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—Ä–æ—Å–æ–∫
        game_result = game_logic.process_throw(
            initiator_id=user.id,
            initiator_username=user.username or f"user{user.id}",
            participants=participants,
            chat_id=chat_id
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É
        for target in game_result['targets']:
            await db.add_event(
                initiator_id=user.id,
                target_id=target[0],
                outcome=game_result['outcome'],
                chat_id=chat_id
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await db.update_user_stats(user.id, game_result['outcome'], is_target=False)
        for target in game_result['targets']:
            await db.update_user_stats(target[0], game_result['outcome'], is_target=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        emoji = game_logic.get_emoji_for_outcome(game_result['outcome'])
        result_message = f"{emoji} {game_result['message']}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.message.answer(
            result_message,
            reply_markup=get_throw_button()
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        try:
            await callback.answer("üí© –ì–æ–≤–Ω–æ –ø–æ–ª–µ—Ç–µ–ª–æ!")
        except Exception:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª)")
        
        logger.info(f"‚úÖ –ë—Ä–æ—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {user.username} -> {game_result['outcome']} -> {len(game_result['targets'])} —Ü–µ–ª–µ–π")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ—Å–∫–∞: {e}")
        try:
            await callback.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        except Exception:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª)")

@dp.message(F.text.contains("–∫–∏–Ω—É—Ç—å –≥–æ–≤–Ω–æ –≤"))
async def handle_manual_throw(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –±—Ä–æ—Å–∫–∞"""
    try:
        user = message.from_user
        chat_id = message.chat.id
        
        logger.info(f"üí© –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã –æ—Ç {user.username} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}: {message.text}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username —Ü–µ–ª–∏
        text = message.text.lower()
        if "–∫–∏–Ω—É—Ç—å –≥–æ–≤–Ω–æ –≤ @" in text:
            target_username = text.split("–∫–∏–Ω—É—Ç—å –≥–æ–≤–Ω–æ –≤ @")[1].split()[0]
            logger.debug(f"üéØ –¶–µ–ª—å —Ä—É—á–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞: @{target_username}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(GAME_SETTINGS['message_delete_delay'])
            try:
                await message.delete()
                logger.debug(f"üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} —É–¥–∞–ª–µ–Ω–æ")
            except:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
            await db.add_user(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
            participants = await get_chat_participants(chat_id)
            
            if participants:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—Ä–æ—Å–æ–∫
                game_result = game_logic.process_throw(
                    initiator_id=user.id,
                    initiator_username=user.username or f"user{user.id}",
                    participants=participants,
                    chat_id=chat_id
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É
                for target in game_result['targets']:
                    await db.add_event(
                        initiator_id=user.id,
                        target_id=target[0],
                        outcome=game_result['outcome'],
                        chat_id=chat_id
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await db.update_user_stats(user.id, game_result['outcome'], is_target=False)
                for target in game_result['targets']:
                    await db.update_user_stats(target[0], game_result['outcome'], is_target=True)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                emoji = game_logic.get_emoji_for_outcome(game_result['outcome'])
                result_message = f"{emoji} {game_result['message']}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await message.answer(
                    result_message,
                    reply_markup=get_throw_button()
                )
                
                logger.info(f"‚úÖ –†—É—á–Ω–æ–π –±—Ä–æ—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {user.username} -> {game_result['outcome']} -> {len(game_result['targets'])} —Ü–µ–ª–µ–π")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id} –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞")
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –¥–ª—è –±—Ä–æ—Å–∫–∞")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—É—á–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.log_startup()
    
    max_retries = 5
    retry_delay = 10
    
    for attempt in range(max_retries):
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info(f"ü§ñ –ë–æ—Ç –ì–æ–≤–Ω–æ–ú—ë—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
            await dp.start_polling(bot, skip_updates=True)
            break  # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
            
            if attempt < max_retries - 1:
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(retry_delay)
                retry_delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            else:
                logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
                break
    
    finally:
        logger.log_shutdown()
        try:
            await bot.session.close()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(main())

